# File: .github/workflows/.codeql.yml
name: "CodeQL TypeScript Scan"

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  schedule:
    - cron: '0 2 * * *'  # Daily at 02:00 UTC to keep results fresh

jobs:
  codeql-analysis:
    name: "Perform CodeQL Analysis"
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        node-version: [16.x, 18.x]  # Test against multiple Node.js LTS versions

    steps:
      - name: "Checkout repository"
        uses: actions/checkout@v4

      - name: "Initialize CodeQL"
        uses: github/codeql-action/init@v2
        with:
          languages: javascript,typescript
          # You can specify extra queries or query packs if needed:
          # queries: security-and-quality, custom-queries

      - name: "Setup Node.js ${{ matrix.node-version }}"
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: "Install dependencies"
        run: npm ci

      - name: "Build project"
        run: npm run build
        # Ensure that your package.json has a `build` script that compiles TypeScript (e.g., "tsc -p tsconfig.json").
        # This step guarantees that CodeQL can pick up generated ESM artifacts if needed.

      - name: "Perform CodeQL database creation"
        # The init step above sets up the environment; the build step ensures source is ready.
        # Now we run the analyze step to produce SARIF.
        uses: github/codeql-action/analyze@v2
        with:
          category: "codeql-ts-scan"
          # You can override the default memory/threads or override other settings here if scanning a large codebase:
          # memory: 8192
          # threads: 2

    # Optional: upload the SARIF as a report artifact for further analysis
    outputs:
      sarif: ${{ steps.analyze.outputs.sarif_on_disk }}

