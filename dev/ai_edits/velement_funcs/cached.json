{"76e1d359f76bde313a9a4c915af8fccb67a132f4df1dc17436b2377ffdad35af":"/**\n * @docs:\n * @title: On after print\n * @desc: Script to be run after the document is printed. The equivalent of HTML attribute `onafterprint`. \n *        The first parameter of the callback is the `Element` object. \n * @param:\n *     @name: callback\n *     @descr: The callback function to execute after printing. It receives the `Element` object and the event.\n *     @type: function | null\n * @return:\n *     @type: this | function\n *     @description Returns the `Element` object unless the parameter `callback` is `null`, then the attribute's value is returned.\n */\non_after_print(): (this: Element, event: Event) => void | null;\non_after_print(callback: ((element: Element, event: Event) => void) | null): this;\non_after_print(callback?: ((element: Element, event: Event) => void) | null): this | ((this: Element, event: Event) => void) | null {\n\tif (callback == null) { return this.onafterprint; }\n\tconst e = this;\n\tthis.onafterprint = (t) => callback(e, t);\n\treturn this;\n}\n","92186bab15562125d0343d7281f2da89fc75ad9eae16b00222c291619bb28aba":"/**\n * @docs:\n * @title: On before print\n * @desc: Script to be run before the document is printed. The equivalent of HTML attribute `onbeforeprint`.\n * @param:\n *     @name: callback\n *     @descr: The function to be executed before printing, receiving the `Element` object as the first parameter.\n *     @type: function | null\n * @return:\n *     @type: this | function\n *     @description Returns the instance of the element for chaining unless parameter `callback` is `null`, then the attribute's value is returned.\n * @funcs: 2\n */\non_before_print(callback: ((element: Element, event: Event) => void) | null): this;\non_before_print(): ((element: Element, event: Event) => void) | null;\non_before_print(callback?: ((element: Element, event: Event) => void) | null): this | ((element: Element, event: Event) => void) | null {\n\tif (callback == null) { return this.onbeforeprint; }\n\tconst e = this;\n\tthis.onbeforeprint = (t) => callback(e, t);\n\treturn this;\n}\n","731c8362def8abd1bf23a2f2f3e05dd004b62f2750734a8ce919d3b4f7ff290b":"/**\n * @docs:\n * @title: On Before Unload\n * @desc: Script to be run when the document is about to be unloaded. \n *        This is the equivalent of the HTML attribute `onbeforeunload`. \n *        The first parameter of the callback is the `Element` object.\n * @param:\n *     @name: callback\n *     @description: The callback function to execute before unloading the document.\n *     @type: Function | null\n * @return:\n *     @type: this | Function\n *     @description: Returns the `Element` object. Unless parameter `callback` is `null`, then the attribute's value is returned.\n * @funcs: 2\n */\non_before_unload(): Function;\non_before_unload(callback: Function | null): this;\non_before_unload(callback?: Function | null): Function | this {\n\tif (callback == null) { return this.onbeforeunload; }\n\tconst e = this;\n\tthis.onbeforeunload = (t) => callback(e, t);\n\treturn this;\n}\n","544295b0a9cd9a7f98f94aa9fa5c9ae599c70647990acd754621108de7bf3c32":"/**\n * @docs:\n * @title: On error\n * @desc: Script to be run when an error occurs. The equivalent of HTML attribute `onerror`. \n *        The first parameter of the callback is the `Element` object. Returns the attribute value when parameter `value` is `null`.\n * @param:\n *     @name: callback\n *     @descr: The callback function to execute when an error occurs.\n *     @type: function\n * @return:\n *     @type: this | undefined\n *     @description Returns the instance of the element for chaining. Unless parameter `value` is `null`, then the attribute's value is returned.\n */\non_error(callback: ((element: Element, error: any) => void) | null): this | undefined {\n\tif (callback == null) { return this.onerror; }\n\tconst e = this;\n\tthis.onerror = (t) => callback(e, t);\n\treturn this;\n}\n","fd41beca1b4495b7019a4c79c48fe14ad6ccaf9c868495d7f676064fc6ed08ab":"/**\n * @docs:\n * @title: On hash change\n * @desc: \n *     Script to be run when there has been changes to the anchor part of a URL.\n *     The equivalent of HTML attribute `onhashchange`.\n *     \n *     The first parameter of the callback is the `Element` object.\n *     \n *     Returns the attribute value when parameter `value` is `null`.\n * @param:\n *     @name: callback\n *     @descr: The callback function to execute on hash change.\n *     @type: (element: Element, event: Event) => void\n * @return:\n *     @type: this | string | null\n *     @description Returns the `Element` object for chaining. If parameter `value` is `null`, the attribute's value is returned.\n */\non_hash_change(callback: (element: Element, event: Event) => void): this;\non_hash_change(value: null): string | null;\non_hash_change(value?: null | ((element: Element, event: Event) => void)): this | string | null {\n    if (value == null) { return this.onhashchange; }\n    const e = this;\n    this.onhashchange = (t) => value(e, t);\n    return this;\n}\n","ec94bdb4223964e7faa36d040d71fa06f8fde864d867ffad7eb224289785097b":"/**\n * @docs:\n * @title: On message\n * @desc: \n *     Script to be run when the message is triggered.\n *     The equivalent of HTML attribute `onmessage`.\n *     \n *     The first parameter of the callback is the `Element` object.\n *     \n *     Returns the attribute value when parameter `value` is `null`.\n * @param:\n *     @name: value\n *     @descr: The value to assign. Leave `null` to retrieve the attribute's value.\n *     @type: Function | null\n * @return:\n *     @type: this | Function | null\n *     @description Returns the `Element` object. Unless parameter `value` is `null`, then the attribute's value is returned.\n */\non_message(): Function | null;\non_message(callback: Function): this;\non_message(callback?: Function | null): Function | null | this {\n    if (callback == null) { return this.onmessage; }\n    const e = this;\n    this.onmessage = (t) => callback(e, t);\n    return this;\n}\n","f5e3c3fe09efc86e36c49cc78f037a8b530271c2452565ecb9f47874ed6b52b1":"/**\n * @docs:\n * @title: On Offline\n * @desc: Script to be run when the browser starts to work offline. The equivalent of HTML attribute `onoffline`. \n *        The first parameter of the callback is the `Element` object. \n * @param:\n *     @name: value\n *     @descr: The value to assign. Leave `null` to retrieve the attribute's value.\n *     @type: Function | null\n * @return:\n *     @type: this | Function\n *     @description Returns the `Element` object. Unless parameter `value` is `null`, then the attribute's value is returned.\n */\non_offline(callback: Function | null): this;\non_offline(): Function | null;\non_offline(callback?: Function | null): this | Function | null {\n\tif (callback == null) { return this.onoffline; }\n\tconst e = this;\n\tthis.onoffline = (t) => callback(e, t);\n\treturn this;\n}\n","61206f38ad53658475295a39675a6697c107de292cd60744ade81135bc378e73":"/**\n * @docs:\n * @title: On online\n * @desc: Script to be run when the browser starts to work online. \n *        The equivalent of HTML attribute `ononline`. \n *        The first parameter of the callback is the `Element` object.\n * @param:\n *     @name: value\n *     @descr: The value to assign. Leave `null` to retrieve the attribute's value.\n *     @type: function | null\n * @return:\n *     @type: this | function | null\n *     @description Returns the `Element` object. Unless parameter `value` is `null`, then the attribute's value is returned.\n * @funcs: 2\n */\non_online(): ((element: Element, event: Event) => void) | null;\non_online(callback: (element: Element, event: Event) => void): this;\non_online(callback?: (element: Element, event: Event) => void | null): this | null {\n\tif (callback == null) { return this.ononline; }\n\tconst e = this;\n\tthis.ononline = (t) => callback(e, t);\n\treturn this;\n}\n","7c886ff3be8b5ba5f5f246ee1060300d16a8373a807f930d9e24ea3fb863feae":"/**\n * @docs:\n * @title: On page hide\n * @desc: \n *     Script to be run when a user navigates away from a page.\n *     The equivalent of HTML attribute `onpagehide`.\n * @param:\n *     @name: value\n *     @descr: The value to assign. Leave `null` to retrieve the attribute's value.\n *     @type: function | null\n * @return:\n *     @type: this | function\n *     @description Returns the `Element` object. Unless parameter `value` is `null`, then the attribute's value is returned.\n */\non_page_hide(callback: (element: Element, event: Event) => void): this;\non_page_hide(callback: null): ((element: Element, event: Event) => void) | null;\non_page_hide(callback?: (element: Element, event: Event) => void | null): this | ((element: Element, event: Event) => void) | null {\n\tif (callback == null) { return this.onpagehide; }\n\tconst e = this;\n\tthis.onpagehide = (t) => callback(e, t);\n\treturn this;\n}\n","8bc60c9858b5542981bdb632c620831ccfadf8ad644630e469deb44fe93ed4b3":"/**\n * @docs:\n * @title: On page show\n * @desc: \n *     Script to be run when a user navigates to a page.\n *     The equivalent of HTML attribute `onpageshow`.\n *     The first parameter of the callback is the `Element` object.\n * @param:\n *     @name: value\n *     @descr: The value to assign. Leave `null` to retrieve the attribute's value.\n *     @type: function | null\n * @return:\n *     @type: function | this\n *     @description Returns the `Element` object. Unless parameter `value` is `null`, then the attribute's value is returned.\n * @funcs: 2\n */\non_page_show(): (event: Event) => void | null;\non_page_show(callback: (element: this, event: Event) => void): this;\non_page_show(callback?: (element: this, event: Event) => void | null): (event: Event) => void | null | this {\n    if (callback == null) { return this.onpageshow; }\n    const e = this;\n    this.onpageshow = (t) => callback(e, t);\n    return this;\n}\n","d8c5af07fd3e7bcfa99d196c450e147ab4e3256e2a1c3928aa9ac4953cef6683":"/**\n * @docs:\n * @title: On Popstate\n * @desc: Script to be run when the window's history changes. The equivalent of HTML attribute `onpopstate`. \n *        The first parameter of the callback is the `Element` object. Returns the attribute value when parameter `value` is `null`.\n * @param:\n *     @name: callback\n *     @descr: The callback function to execute on popstate event.\n *     @type: function\n * @return:\n *     @type: this | any\n *     @description Returns the `Element` object. Unless parameter `callback` is `null`, then the attribute's value is returned.\n */\non_popstate(callback: (element: Element, event: PopStateEvent) => void): this;\non_popstate(callback: null): any;\non_popstate(callback?: (element: Element, event: PopStateEvent) => void | null): this | any {\n    if (callback == null) { return this.onpopstate; }\n    const e = this;\n    this.onpopstate = (t) => callback(e, t);\n    return this;\n}\n","56f2961e3e6620500de1ae5bbc20d0d32b4be79db01614972a7f2f87146175a3":"/**\n * @docs:\n * @title: On Storage\n * @desc: Script to be run when a Web Storage area is updated. \n *        The equivalent of HTML attribute `onstorage`. \n *        The first parameter of the callback is the `Element` object.\n * @param:\n *     @name: callback\n *     @descr: The function to be executed when storage is updated.\n *     @type: function\n * @return:\n *     @type: this | Event\n *     @description Returns the `Element` object. Unless parameter `value` is `null`, then the attribute's value is returned.\n */\non_storage(callback: (element: Element, event: Event) => void): this;\non_storage(value: null): (Event | undefined);\non_storage(value?: null | ((element: Element, event: Event) => void)): this | Event | undefined {\n    if (value == null) { return this.onstorage; }\n    const e = this;\n    this.onstorage = (t) => value(e, t);\n    return this;\n}\n","5506462e6e96a554c6dd1f065c6e9c933b03dc458a3874d93795c10fb42b34ce":"/**\n * @docs:\n * @title: On Unload\n * @desc: Fires once a page has unloaded (or the browser window has been closed). \n *        The equivalent of HTML attribute `onunload`. \n * @param:\n *     @name: callback\n *     @descr: The function to call when the unload event occurs.\n *     @type: function\n * @return:\n *     @type: this | string | null\n *     @description Returns the instance of the element for chaining. \n *                  If the parameter `callback` is `null`, returns the current attribute value.\n * @funcs: 2\n */\non_unload(): string | null;\non_un_load(callback: (element: Element, event: Event) => void): this;\non_unload(callback?: (element: Element, event: Event) => void | null): string | null | this {\n    if (callback == null) { return this.onunload; }\n    const e = this;\n    this.onunload = (t) => callback(e, t);\n    return this;\n}\n","c4039c453a684f54c93b9f412ae0f192b94fcdb846735ae71f76075d883fbdb7":"/**\n * @docs:\n * @title: On Blur\n * @desc: Fires the moment that the element loses focus, similar to the HTML attribute `onblur`. \n *        The first parameter of the callback is the `Element` object. \n * @param:\n *     @name: callback\n *     @descr: The function to call when the element loses focus.\n *     @type: function\n * @return:\n *     @type: this | any\n *     @description Returns the `Element` object unless the parameter `callback` is `null`, \n *                  then the attribute's value is returned.\n * @funcs: 2\n */\non_blur(): any;\non_blur(callback: (element: Element, event: Event) => void): this;\non_blur(callback?: (element: Element, event: Event) => void | null): this | any {\n\tif (callback == null) { return this.onblur; }\n\tconst e = this;\n\tthis.onblur = (t) => callback(e, t);\n\treturn this;\n}\n","6e3169cc1b01d5db9cb5ce020c30bc53020b326d8436d7045388f04e0329cb1f":"/**\n * @docs:\n * @title: On Change\n * @desc: Fires the moment when the value of the element is changed. The equivalent of HTML attribute `onchange`. Returns the attribute value when parameter `value` is `null`.\n * @param:\n *     @name: callback\n *     @descr: The function to call when the value changes, receiving the `Element` object and the event as parameters.\n *     @type: function\n * @return:\n *     @type: this | any\n *     @description Returns the `Element` object for chaining. If `callback` is `null`, returns the current `onchange` value.\n * @funcs: 2\n */\non_change(callback: (element: this, event: Event) => void): this;\non_change(callback: null): any;\non_change(callback?: (element: this, event: Event) => void | null): this | any {\n    if (callback == null) { return this.onchange; }\n    const e = this;\n    this.onchange = (t) => callback(e, t);\n    return this;\n}\n","716fbd76badac29c00dfa50db3d195440fef6dd76bfa7ebe53f9c49715e3cba7":"/**\n * @docs:\n * @title: On Focus\n * @desc: Fires the moment when the element gets focus. This is the equivalent of the HTML attribute `onfocus`. \n *        The first parameter of the callback is the `Element` object. \n * @param:\n *     @name: callback\n *     @descr: The function to be called when the element gets focus.\n *     @type: function | null\n * @return:\n *     @type: this | Element\n *     @description Returns the `Element` object unless the parameter `value` is `null`, then the attribute's value is returned.\n * @funcs: 2\n */\non_focus(): Element;\non_focus(callback: (element: this, event: FocusEvent) => void): this;\non_focus(callback?: (element: this, event: FocusEvent) => void | null): this | Element {\n    if (callback == null) { return this.onfocus; }\n    const e = this;\n    this.onfocus = (t) => callback(e, t);\n    return this;\n}\n","56b484bdae3a3a58a19f7f0e9d39ceea1c2478416a5b533507050f4a656ba625":"/**\n * @docs:\n * @title: On Input\n * @desc: \n *     Script to be run when an element gets user input.\n *     The equivalent of HTML attribute `oninput`. \n *     Returns the attribute value when parameter `value` is `null`.\n * @param:\n *     @name: callback\n *     @descr: The function to call when user input is detected.\n *     @type: function\n * @return:\n *     @type: this | any\n *     @description Returns the `Element` object for chaining, or the attribute's value if the parameter is `null`.\n */\non_input(callback: (element: Element, event: Event) => void): this;\non_input(callback?: null): any;\non_input(callback?: (element: Element, event: Event) => void | null): this | any {\n\tif (callback == null) { return this.oninput; }\n\tconst e = this;\n\tthis.oninput = (t) => callback(e, t);\n\treturn this;\n}\n","154dcbf9b74082b484adc93d20758af93b6a3cd5cfd6dbbf03f1a012b051c043":"/**\n * @docs:\n * @title: On Input\n * @desc: Script to be run before an element gets user input. The equivalent of HTML attribute `onbeforeinput`.\n * @param:\n *     @name: callback\n *     @description: The function to execute before user input. Receives the `Element` object and the event as parameters.\n *     @type: function\n * @return:\n *     @type: this | any\n *     @description: Returns the `Element` object for chaining. If `callback` is `null`, returns the current value of `onbeforeinput`.\n */\non_before_input(callback: (element: Element, event: Event) => void): this;\non_before_input(callback: null): any;\non_before_input(callback?: (element: Element, event: Event) => void | null): this | any {\n\tif (callback == null) { return this.onbeforeinput; }\n\tconst e = this;\n\tthis.onbeforeinput = (t) => callback(e, t);\n\treturn this;\n}\n","27df3c117abcb9f611e1c2bf47f57681f0e374753c193d211b80ea0b7e9c1ab5":"/**\n * @docs:\n * @title: On Invalid\n * @desc: Script to be run when an element is invalid. The equivalent of HTML attribute `oninvalid`. \n *        The first parameter of the callback is the `Element` object. \n * @param:\n *     @name: value\n *     @descr: The value to assign. Leave `null` to retrieve the attribute's value.\n *     @type: function | null\n * @return:\n *     @type: this | function\n *     @description Returns the `Element` object. Unless parameter `value` is `null`, then the attribute's value is returned.\n */\non_invalid(): (element: Element, t: Event) => void | null;\non_invalid(callback: (element: Element, t: Event) => void): this;\non_invalid(callback?: (element: Element, t: Event) => void | null): this | ((element: Element, t: Event) => void) | null {\n\tif (callback == null) { return this.oninvalid; }\n\tconst e = this;\n\tthis.oninvalid = (t) => callback(e, t);\n\treturn this;\n}\n","f46c3c4de9b85470d7aef88e71fbe46c93770e4c254af9fc91ec2388a2d1be07":"/**\n * @docs:\n * @title: On Reset\n * @desc: Fires when the Reset button in a form is clicked. The equivalent of HTML attribute `onreset`.\n *         The first parameter of the callback is the `Element` object. Returns the attribute value when parameter `value` is `null`.\n * @param:\n *     @name: callback\n *     @descr: The function to call when the Reset button is clicked.\n *     @type: function\n * @return:\n *     @type: this | any\n *     @description Returns the `Element` object. Unless parameter `value` is `null`, then the attribute's value is returned.\n */\non_reset(callback: (element: this, event: Event) => void): this;\non_reset(callback?: null): any;\non_reset(callback?: (element: this, event: Event) => void | null): this | any {\n    if (callback == null) { return this.onreset; }\n    const e = this;\n    this.onreset = (t) => callback(e, t);\n    return this;\n}\n","9aee10347641a4c36ca8577dec5c1e97f1e240e25e562684282587171f757b8e":"/**\n * @docs:\n * @title: On search\n * @desc: Fires when the user writes something in a search field (for <input=\"search\">).\n *        The equivalent of HTML attribute `onsearch`. The first parameter of the callback is the `Element` object.\n *        Returns the attribute value when parameter `value` is `null`.\n * @param:\n *     @name: callback\n *     @descr: The function to call when the search event is triggered.\n *     @type: (element: Element, event: Event) => void\n * @return:\n *     @type: this | string | null\n *     @description Returns the `Element` object for chaining. Unless parameter `callback` is `null`, then the attribute's value is returned.\n */\non_search(callback: (element: Element, event: Event) => void): this;\non_search(callback: null): string | null;\non_search(callback?: (element: Element, event: Event) => void | null): this | string | null {\n    if (callback == null) { return this.onsearch; }\n    const e = this;\n    this.onsearch = (t) => callback(e, t);\n    return this;\n}\n","a0e3257ea46e0fb21f3f6feb38c5e7d075e5756643f13d9472589bf338eed1a3":"/**\n * @docs:\n * @title: On Select\n * @desc: Fires after some text has been selected in an element. The equivalent of HTML attribute `onselect`. Returns the attribute value when parameter `value` is `null`.\n * @param:\n *     @name: callback\n *     @descr: The callback function to execute when text is selected. It receives the `Element` object as the first parameter.\n *     @type: function\n * @return:\n *     @type: this | any\n *     @description Returns the `Element` object. Unless parameter `value` is `null`, then the attribute's value is returned.\n * @funcs: 2\n */\non_select(): any;\non_select(callback: (element: Element, text: string) => void): this;\non_select(callback?: (element: Element, text: string) => void): any {\n    if (callback == null) { return this.onselect; }\n    const e = this;\n    this.onselect = (t) => callback(e, t);\n    return this;\n}\n","60cacabfe39c9e892f2c6d7ef9049ebce03f50bcc04a5d1357a4a724bc74620e":"/**\n * @docs:\n * @title: On Submit\n * @desc: Fires when a form is submitted, similar to the HTML attribute `onsubmit`. \n *        The first parameter of the callback is the `Element` object. \n * @param:\n *     @name: callback\n *     @descr: The callback function to execute on form submission. \n *     @type: (element: Element, event: Event) => void\n * @return:\n *     @type: this | string | null\n *     @description Returns the instance of the element for chaining. If `callback` is null, returns the current `onsubmit` attribute value.\n * @funcs: 2\n */\non_submit(): string | null;\non_submit(callback: (element: Element, event: Event) => void): this;\non_submit(callback?: (element: Element, event: Event) => void | null): string | null | this {\n    if (callback == null) { return this.onsubmit; }\n    const e = this;\n    this.onsubmit = (t) => callback(e, t);\n    return this;\n}\n","c00cb1de2c28fe1806117213bafbbbc5ec239e8fc2bc5e6f1d66a35ab97a4ec2":"/**\n * @docs:\n * @title: On Key Down\n * @desc: Fires when a user is pressing a key. The equivalent of HTML attribute `onkeydown`. \n * The first parameter of the callback is the `Element` object. \n * Returns the attribute value when parameter `value` is `null`.\n * @param:\n *     @name: callback\n *     @descr: The callback function to execute when the key is pressed.\n *     @type: Function\n * @return:\n *     @type: this | string | null\n *     @description Returns the `Element` object for chaining. If the parameter `callback` is `null`, the current attribute's value is returned.\n * @funcs: 2\n */\non_key_down(): string | null;\non_key_down(callback: (element: Element, event: KeyboardEvent) => void): this;\non_key_down(callback?: (element: Element, event: KeyboardEvent) => void): string | null | this {\n\tif (callback == null) { return this.onkeydown; }\n\tconst e = this;\n\tthis.onkeydown = (t) => callback(e, t);\n\treturn this;\n}\n","c63cd7ba1a0ec70d80eaae7be703031d3133732d577b2734ead8fb1a07fcf90b":"/**\n * @docs:\n * @title: On Key Press\n * @desc: Fires when a user presses a key, similar to the HTML `onkeypress` attribute.\n * The first parameter of the callback is the `Element` object, allowing for dynamic handling of key events.\n * @param:\n *     @name: callback\n *     @descr: The function to call when a key is pressed. Receives the `Element` and event as parameters.\n *     @type: function\n * @return:\n *     @type: this | string | null\n *     @description Returns the `Element` object for chaining. If `callback` is `null`, the current attribute value is returned.\n */\non_key_press(callback: (element: Element, event: KeyboardEvent) => void): this;\non_key_press(callback: null): string | null;\non_key_press(callback?: (element: Element, event: KeyboardEvent) => void | null): this | string | null {\n\tif (callback == null) { return this.onkeypress; }\n\tconst e = this;\n\tthis.onkeypress = (t) => callback(e, t);\n\treturn this;\n}\n","0992a381e83a678cf55beda2204202bce9ea155cfdb9689c87a3f96208769d0d":"/**\n * @docs:\n * @title: On Key Up\n * @desc: Fires when a user releases a key, similar to the HTML attribute `onkeyup`. \n *        The first parameter of the callback is the `Element` object.\n * @param:\n *     @name: callback\n *     @descr: The function to call when the key is released. \n *              Leave `null` to retrieve the current attribute's value.\n *     @type: function | null\n * @return:\n *     @type: this | string\n *     @description Returns the `Element` object for chaining, unless `callback` is `null`, \n *                  in which case the current attribute's value is returned.\n */\non_key_up(): string;\non_key_up(callback: (element: Element, event: KeyboardEvent) => void): this;\non_key_up(callback?: (element: Element, event: KeyboardEvent) => void | null): string | this {\n    if (callback == null) { return this.onkeyup; }\n    const e = this;\n    this.onkeyup = (t) => callback(e, t);\n    return this;\n}\n","35c57f7e60322cf9f58741e164a333ec658a77eff7260c6fe511f91df62d83c1":"/**\n * @docs:\n * @title: On dbl click\n * @desc: Fires on a mouse double-click on the element. The equivalent of HTML attribute `ondblclick`. \n *        The first parameter of the callback is the `Element` object. \n *        Returns the attribute value when parameter `value` is `null`.\n * @param:\n *     @name: callback\n *     @descr: The function to execute on double-click. Receives the `Element` and the event as parameters.\n *     @type: function\n * @return:\n *     @type: this | string | null\n *     @description Returns the `Element` object for chaining. If `callback` is null, returns the current attribute value.\n * @funcs: 2\n */\non_dbl_click(callback: (element: Element, event: MouseEvent) => void): this;\non_dbl_click(callback: null): string | null;\non_dbl_click(callback?: (element: Element, event: MouseEvent) => void | null): this | string | null {\n\tif (callback == null) { return this.ondblclick; }\n\tconst e = this;\n\tthis.ondblclick = (t) => callback(e, t);\n\treturn this;\n}\n","3a8d71aa43bbdbffc891a539104be7419ab1673ed09736e5d89fb06a2291a94f":"/**\n * @docs:\n * @title: On Mouse Down\n * @desc: Fires when a mouse button is pressed down on an element. The equivalent of HTML attribute `onmousedown`. \n *        The first parameter of the callback is the `Element` object. Returns the attribute value when parameter `value` is `null`.\n * @param:\n *     @name: callback\n *     @descr: The function to execute when the mouse button is pressed down.\n *     @type: (element: Element, event: MouseEvent) => void\n * @return:\n *     @type: this | string | null\n *     @description Returns the `Element` object for chaining. If the parameter `callback` is `null`, then the attribute's value is returned.\n */\non_mouse_down(callback: (element: Element, event: MouseEvent) => void): this;\non_mouse_down(callback: null): string | null;\non_mouse_down(callback?: (element: Element, event: MouseEvent) => void | null): this | string | null {\n\tif (callback == null) { return this.onmousedown; }\n\tconst e = this;\n\tthis.onmousedown = (t) => callback(e, t);\n\treturn this;\n}\n","9dc981bd285801cf47d6698750cfc419a31944c3360c3632c672de23f0a02158":"/**\n * @docs:\n * @title: On Mouse Move\n * @desc: Fires when the mouse pointer is moving while it is over an element. \n *        The equivalent of HTML attribute `onmousemove`. Invokes the callback with the element and event.\n * @param:\n *     @name: callback\n *     @descr: The function to call when the mouse moves over the element.\n *     @type: (element: Element, event: MouseEvent) => void\n * @return:\n *     @type: this | MouseEvent\n *     @description Returns the instance of the element for chaining. Unless parameter `callback` is `null`, then the event is returned.\n * @funcs: 2\n */\non_mouse_move(callback: (element: Element, event: MouseEvent) => void): this;\non_mouse_move(callback: null): MouseEvent | this;\non_mouse_move(callback?: (element: Element, event: MouseEvent) => void | null): this | MouseEvent {\n\tif (callback == null) { return this.onmousemove; }\n\tconst e = this;\n\tthis.onmousemove = (t) => callback(e, t);\n\treturn this;\n}\n","f49ab8b1df50886437dd54a233b8e3cf91d9bff888ff858df4505f8830ed3c25":"/**\n * @docs:\n * @title: On mouse out\n * @desc: Fires when the mouse pointer moves out of an element. The equivalent of HTML attribute `onmouseout`. \n *         The first parameter of the callback is the `Element` object. \n *         Returns the attribute value when parameter `value` is `null`.\n * @param:\n *     @name: callback\n *     @description: The callback function to execute when the mouse moves out.\n *     @type: (element: Element, event: MouseEvent) => void\n * @return:\n *     @type: this | string | null\n *     @description Returns the `Element` object for chaining, or the attribute's value if the callback is `null`.\n */\non_mouse_out(callback: (element: Element, event: MouseEvent) => void): this;\non_mouse_out(callback: null): string | null;\non_mouse_out(callback?: (element: Element, event: MouseEvent) => void | null): this | string | null {\n\tif (callback == null) { return this.onmouseout; }\n\tconst e = this;\n\tthis.onmouseout = (t) => callback(e, t);\n\treturn this;\n}\n","162c904490c8cc4b257a5f8fe641b8510446034032bc1eb8381487bf842adaa7":"/**\n * @docs:\n * @title: On Mouse Over\n * @desc: Fires when the mouse pointer moves over an element, similar to the HTML `onmouseover` attribute.\n * @param:\n *     @name: callback\n *     @descr: The callback function to execute when the mouse is over the element.\n *     @type: function\n * @return:\n *     @type: this | any\n *     @description Returns the instance of the element for chaining. If `callback` is null, returns the current `onmouseover` attribute value.\n * @funcs: 2\n */\non_mouse_over(): any;\non_mouse_over(callback: (element: Element, event: MouseEvent) => void): this;\non_mouse_over(callback?: (element: Element, event: MouseEvent) => void): this | any {\n\tif (callback == null) { return this.onmouseover; }\n\tconst e = this;\n\tthis.onmouseover = (t) => callback(e, t);\n\treturn this;\n}\n","5650b06dee97be6ded116aa5eefd9cf6219eeecf690815903334e4f2a3c3fef4":"/**\n * @docs:\n * @title: On Mouse Up\n * @desc: Fires when a mouse button is released over an element. The equivalent of HTML attribute `onmouseup`.\n *         The first parameter of the callback is the `Element` object. Returns the attribute value when parameter `value` is `null`.\n * @param:\n *     @name: callback\n *     @descr: The callback function to execute when the mouse button is released.\n *     @type: function\n * @return:\n *     @type: this | Function\n *     @description Returns the `Element` object for chaining. If `callback` is `null`, returns the current `onmouseup` value.\n * @funcs: 2\n */\non_mouse_up(): Function | this;\non_mouse_up(callback: (element: Element, event: MouseEvent) => void): this;\non_mouse_up(callback?: (element: Element, event: MouseEvent) => void): Function | this {\n\tif (callback == null) { return this.onmouseup; }\n\tconst e = this;\n\tthis.onmouseup = (t) => callback(e, t);\n\treturn this;\n}\n","9b1d7f2052a3a84ff34e4243cde4e7b02bc74e0cdf8906f20db52e1725db6959":"/**\n * @docs:\n * @title: On Mouse Wheel\n * @desc: Deprecated. Use the onwheel attribute instead. This function simulates the onmousewheel HTML attribute.\n * The first parameter of the callback is the `Element` object. Returns the attribute value when parameter `value` is `null`.\n * @param:\n *     @name: callback\n *     @descr: The callback function to execute on mouse wheel events.\n *     @type: function\n * @return:\n *     @type: this | any\n *     @description Returns the `Element` object. Unless parameter `callback` is `null`, then the attribute's value is returned.\n */\non_mouse_wheel(): any;\non_mouse_wheel(callback: (element: Element, event: Event) => void): this;\non_mouse_wheel(callback?: (element: Element, event: Event) => void): this | any {\n\tif (callback == null) { return this.onmousewheel; }\n\tconst e = this;\n\tthis.onmousewheel = (t) => callback(e, t);\n\treturn this;\n}\n","d243cdcdc48b9538b33b3054c96ff9a6b89434f5104cc11df39ad36528947293":"/**\n * @docs:\n * @title: On Wheel\n * @desc: Fires when the mouse wheel rolls up or down over an element. The equivalent of HTML attribute `onwheel`. \n *        The first parameter of the callback is the `Element` object. \n * @param:\n *     @name: callback\n *     @descr: The callback function to execute on wheel event.\n *     @type: function\n * @return:\n *     @type: this | any\n *     @description Returns the instance of the element for chaining. Unless parameter `callback` is `null`, then the attribute's value is returned.\n * @funcs: 2\n */\non_wheel(): any;\non_wheel(callback: (element: Element, event: WheelEvent) => void): this;\non_wheel(callback?: (element: Element, event: WheelEvent) => void): this | any {\n    if (callback == null) { return this.onwheel; }\n    const e = this;\n    this.onwheel = (t) => callback(e, t);\n    return this;\n}\n","35f708393f400e01173e47b8172c9983691c3932dbc513813a7491c94a255b7c":"/**\n * @docs:\n * @title: On Drag\n * @desc: Script to be run when an element is dragged. The equivalent of HTML attribute `ondrag`. \n *        The first parameter of the callback is the `Element` object. Returns the attribute value when parameter `value` is `null`.\n * @param:\n *     @name: callback\n *     @descr: The callback function to execute when the element is dragged.\n *     @type: function\n * @return:\n *     @type: this | Function | null\n *     @description Returns the instance of the element for chaining unless the parameter `value` is `null`, then the attribute's value is returned.\n * @funcs: 2\n */\non_drag(callback: (element: Element, event: Event) => void): this;\non_drag(callback: null): ((element: Element, event: Event) => void) | null;\non_drag(callback?: (element: Element, event: Event) => void | null): this | ((element: Element, event: Event) => void) | null {\n\tif (callback == null) { return this.ondrag; }\n\tconst e = this;\n\tthis.ondrag = (t) => callback(e, t);\n\treturn this;\n}\n","1d218586a8220fdb96f090b8a7dfd29c352853fd604129d9a0eef429726711f1":"/**\n * @docs:\n * @title: On Drag End\n * @desc: Script to be run at the end of a drag operation. The equivalent of HTML attribute `ondragend`. \n *        The first parameter of the callback is the `Element` object. \n * @param:\n *     @name: callback\n *     @descr: The callback function to execute at the end of the drag operation.\n *     @type: (element: Element, event: Event) => void\n * @return:\n *     @type: this | Event\n *     @description Returns the `Element` object unless the parameter `value` is `null`, in which case the attribute's value is returned.\n */\non_drag_end(callback: (element: Element, event: Event) => void): this;\non_drag_end(callback: null): Event | this;\non_drag_end(callback?: (element: Element, event: Event) => void | null): this | Event {\n\tif (callback == null) { return this.ondragend; }\n\tconst e = this;\n\tthis.ondragend = (t) => callback(e, t);\n\treturn this;\n}\n","77aa044742d1d9fa15afb5415c927d9d4d76256b9ac035a41f692c13dd2008c8":"/**\n * @docs:\n * @title: On Drag Enter\n * @desc: \n *     Script to be run when an element has been dragged to a valid drop target.\n *     The equivalent of HTML attribute `ondragenter`.\n *     \n *     The first parameter of the callback is the `Element` object.\n *     \n *     Returns the attribute value when parameter `value` is `null`.\n * @param:\n *     @name: callback\n *     @descr: The function to execute when the drag enters the target.\n *     @type: (element: Element, event: DragEvent) => void\n * @return:\n *     @type: this | ((element: Element, event: DragEvent) => void) | null\n *     @description Returns the `Element` object. Unless parameter `value` is `null`, then the attribute's value is returned.\n * @funcs: 2\n */\non_drag_enter(callback?: (element: Element, event: DragEvent) => void): this | ((element: Element, event: DragEvent) => void) | null {\n\tif (callback == null) { return this.ondragenter; }\n\tconst e = this;\n\tthis.ondragenter = (t) => callback(e, t);\n\treturn this;\n}\n","c7bcc9a334982ca9c29430925c1fcb44b816e4564f1a24d66f27fa47246d8eda":"/**\n * @docs:\n * @title: On drag leave\n * @desc: \n *     Script to be run when an element leaves a valid drop target.\n *     The equivalent of HTML attribute `ondragleave`.\n *     \n *     The first parameter of the callback is the `Element` object.\n *     \n *     Returns the attribute value when parameter `value` is `null`.\n * @param:\n *     @name: value\n *     @descr: The value to assign. Leave `null` to retrieve the attribute's value.\n *     @type: function | null\n * @return:\n *     @type: this | function | null\n *     @description Returns the `Element` object. Unless parameter `value` is `null`, then the attribute's value is returned.\n */\non_drag_leave(): ((t: Event) => void) | null;\non_drag_leave(callback: (element: Element, event: Event) => void): this;\non_drag_leave(callback?: (element: Element, event: Event) => void | null): this | ((t: Event) => void) | null {\n    if (callback == null) { return this.ondragleave; }\n    const e = this;\n    this.ondragleave = (t) => callback(e, t);\n    return this;\n}\n","3dcbac31305d87002fc05abd8aec0a4a15432df4a1090f68a2717b1e2ce64caa":"/**\n * @docs:\n * @title: On drag over\n * @desc: \n *     Script to be run when an element is being dragged over a valid drop target.\n *     The equivalent of HTML attribute `ondragover`.\n * @param:\n *     @name: callback\n *     @descr: The function to execute when the drag over event occurs.\n *     @type: (element: Element, event: Event) => void\n * @return:\n *     @type: this | Element\n *     @description Returns the `Element` object. Unless parameter `callback` is `null`, then the attribute's value is returned.\n * @funcs: 2\n */\non_drag_over(): Element;\non_drag_over(callback: (element: Element, event: Event) => void): this;\non_drag_over(callback?: (element: Element, event: Event) => void): this | Element {\n\tif (callback == null) { return this.ondragover; }\n\tconst e = this;\n\tthis.ondragover = (t) => callback(e, t);\n\treturn this;\n}\n","6d7ae2f44533c85bb27a15666980d6809b76ea52ada26a7faea58fa4c7acf4ee":"/**\n * @docs:\n * @title: On Drag Start\n * @desc: Script to be run at the start of a drag operation. The equivalent of HTML attribute `ondragstart`. \n *        The first parameter of the callback is the `Element` object. \n *        Returns the attribute value when parameter `value` is `null`.\n * @param:\n *     @name: callback\n *     @descr: The function to call when the drag starts.\n *     @type: function\n * @return:\n *     @type: this | EventListener\n *     @description Returns the `Element` object for chaining unless parameter `callback` is `null`, then the attribute's value is returned.\n */\non_drag_start(callback: (element: Element, event: Event) => void): this;\non_drag_start(callback: null): EventListener | null;\non_drag_start(callback?: (element: Element, event: Event) => void | null): this | EventListener | null {\n\tif (callback == null) { return this.ondragstart; }\n\tconst e = this;\n\tthis.ondragstart = (t) => callback(e, t);\n\treturn this;\n}\n","5d0879c8ffb92608518a01568b8269ac2d4a14caa7bd43360c2aa9eec54ff76e":"/**\n * @docs:\n * @title: On drop\n * @desc: Script to be run when dragged element is being dropped. The equivalent of HTML attribute `ondrop`. The first parameter of the callback is the `Element` object. Returns the attribute value when parameter `value` is `null`.\n * @param:\n *     @name: value\n *     @description: The value to assign. Leave `null` to retrieve the attribute's value.\n *     @type: Function | null\n * @return:\n *     @type: Function | this\n *     @description: Returns the `Element` object. Unless parameter `value` is `null`, then the attribute's value is returned.\n * @funcs: 2\n */\non_drop(): Function | null;\non_drop(callback: Function): this;\non_drop(callback?: Function | null): Function | this {\n\tif (callback == null) { return this.ondrop; }\n\tconst e = this;\n\tthis.ondrop = (t) => callback(e, t);\n\treturn this;\n}\n","82d1b316464d3a758bdd3e3389ed3b877fbe171771fc29d41f45b599fc81a618":"/**\n * @docs:\n * @title: On Copy\n * @desc: Fires when the user copies the content of an element. The equivalent of HTML attribute `oncopy`. \n *        The first parameter of the callback is the `Element` object. \n *        Returns the attribute value when parameter `value` is `null`.\n * @param:\n *     @name: callback\n *     @descr: The function to be called when the copy event occurs.\n *     @type: function\n * @return:\n *     @type: this | string | null\n *     @description Returns the `Element` object. Unless parameter `value` is `null`, then the attribute's value is returned.\n */\non_copy(callback: (element: Element, event: Event) => void): this;\non_copy(value: null): string | null;\non_copy(value?: null | ((element: Element, event: Event) => void)): this | string | null {\n\tif (value == null) { return this.oncopy; }\n\tconst e = this;\n\tthis.oncopy = (t) => value(e, t);\n\treturn this;\n}\n","d2ce32174a79345337d107547bb5adeee696e04118c30c36297d3c470fc8b92f":"/**\n * @docs:\n * @title: On Cut\n * @desc: Fires when the user cuts the content of an element, equivalent to the HTML attribute `oncut`.\n *        The first parameter of the callback is the `Element` object.\n * @param:\n *     @name: callback\n *     @descr: The function to call when the cut event occurs.\n *     @type: function\n * @return:\n *     @type: this | any\n *     @description Returns the `Element` object unless the parameter `callback` is `null`, then the attribute's value is returned.\n * @funcs: 2\n */\non_cut(): any;\non_cut(callback: (element: Element, event: Event) => void): this;\non_cut(callback?: (element: Element, event: Event) => void): any | this {\n\tif (callback == null) { return this.oncut; }\n\tconst e = this;\n\tthis.oncut = (t) => callback(e, t);\n\treturn this;\n}\n","499e73dd42b1febb57c4ba874fb26a64d1957db8a873c1ca3be5bb8d31f08e7b":"/**\n * @docs:\n * @title: On Paste\n * @desc: Fires when the user pastes some content in an element. The equivalent of HTML attribute `onpaste`. \n *        The first parameter of the callback is the `Element` object. Returns the attribute value when parameter `value` is `null`.\n * @param:\n *     @name: callback\n *     @descr: The function to call when the paste event occurs.\n *     @type: (element: Element, event: Event) => void\n * @return:\n *     @type: this | string | null\n *     @description Returns the `Element` object for chaining. If `callback` is `null`, returns the current `onpaste` attribute value.\n */\non_paste(callback: (element: Element, event: Event) => void): this;\non_paste(callback: null): string | null;\non_paste(callback?: (element: Element, event: Event) => void | null): this | string | null {\n\tif (callback == null) { return this.onpaste; }\n\tconst e = this;\n\tthis.onpaste = (t) => callback(e, t);\n\treturn this;\n}\n","82d9ac630b339d25a6c534be9d044eb453c4257e817ea07721b126e034ebedce":"/**\n * @docs:\n * @title: On Abort\n * @desc: Script to be run on abort, equivalent to the HTML attribute `onabort`. \n *        The first parameter of the callback is the `Element` object. \n *        Returns the attribute value when parameter `value` is `null`.\n * @param:\n *     @name: callback\n *     @descr: The callback function to execute on abort event.\n *     @type: function\n * @return:\n *     @type: this | EventListener\n *     @description Returns the instance of the element for chaining. Unless parameter `callback` is `null`, then the attribute's value is returned.\n */\non_abort(callback: ((element: Element, event: Event) => void) | null): this | EventListener {\n    if (callback == null) { return this.onabort; }\n    const e = this;\n    this.onabort = (t) => callback(e, t);\n    return this;\n}\n","82f237684a4f0acda026bdbadc7920f4fa70cf7d9d74fb5c009a9926bca0b849":"/**\n * @docs:\n * @title: On Can Play\n * @desc: Script to be run when a file is ready to start playing (when it has buffered enough to begin). \n *        The equivalent of HTML attribute `oncanplay`. \n *        Returns the attribute value when parameter `value` is `null`.\n * @param:\n *     @name: callback\n *     @descr: The callback function to execute when the event occurs.\n *     @type: (element: Element, event: Event) => void\n * @return:\n *     @type: this | (Element | null)\n *     @description Returns the `Element` object. Unless parameter `value` is `null`, then the attribute's value is returned.\n * @funcs: 2\n */\non_canplay(callback: (element: Element, event: Event) => void): this;\non_canplay(callback?: null): (Element | null);\non_canplay(callback?: (element: Element, event: Event) => void | null): this | (Element | null) {\n\tif (callback == null) { return this.oncanplay; }\n\tconst e = this;\n\tthis.oncanplay = (t) => callback(e, t);\n\treturn this;\n}\n","38d06c54794e4bb6c2e840e2299d069bda71ad0fca77470b3358594ecc1fff8c":"/**\n * @docs:\n * @title: On Can Play Through\n * @desc: Script to be run when a file can be played all the way to the end without pausing for buffering. \n *        The equivalent of HTML attribute `oncanplaythrough`.\n * @param:\n *     @name: callback\n *     @description: The callback function to execute when the event occurs.\n *     @type: Function\n * @return:\n *     @type: this | Event\n *     @description: Returns the `Element` object. Unless parameter `value` is `null`, then the attribute's value is returned.\n * @funcs: 2\n */\non_canplay_through(callback: Function): this;\non_canplay_through(): Event | null;\non_canplay_through(callback?: Function | null): this | Event | null {\n    if (callback == null) { return this.oncanplaythrough; }\n    const e = this;\n    this.oncanplaythrough = (t) => callback(e, t);\n    return this;\n}\n","ccb72ea7f51dddada17c236a359bcb241a2b258c4213f43b61c9db29be951cdd":"/**\n * @docs:\n * @title: On Cue Change\n * @desc: Script to be run when the cue changes in a <track> element. \n *        The equivalent of HTML attribute `oncuechange`. \n *        The first parameter of the callback is the `Element` object.\n * @param:\n *     @name: callback\n *     @descr: The function to call when the cue changes.\n *     @type: function\n * @return:\n *     @type: this | any\n *     @description Returns the instance of the element for chaining. \n *                  Unless the parameter `callback` is `null`, then the attribute's value is returned.\n */\non_cue_change(callback: ((element: Element, cue: any) => void) | null): this | any {\n\tif (callback == null) { return this.oncuechange; }\n\tconst e = this;\n\tthis.oncuechange = (t) => callback(e, t);\n\treturn this;\n}\n","89adece50d7a0a93e8a76692ad8ce449a4c42210c266e12d4448c225cbab56e8":"/**\n * @docs:\n * @title: On Duration Change\n * @desc: Script to be run when the length of the media changes. The equivalent of HTML attribute `ondurationchange`. \n *        The first parameter of the callback is the `Element` object. \n * @param:\n *     @name: callback\n *     @descr: The callback function to execute on duration change.\n *     @type: function\n * @return:\n *     @type: this | Function\n *     @description Returns the `Element` object. Unless parameter `value` is `null`, then the attribute's value is returned.\n */\non_duration_change(callback: (element: Element, time: Event) => void): this;\non_duration_change(callback: null): Function | this;\non_duration_change(callback?: (element: Element, time: Event) => void | null): this | Function {\n\tif (callback == null) { return this.ondurationchange; }\n\tconst e = this;\n\tthis.ondurationchange = (t) => callback(e, t);\n\treturn this;\n}\n","1e87021f98469237e53cf2e5a3210dc1ce7d8fdb2baeb2661f0db5d4bc3ebd0e":"/**\n * @docs:\n * @title: On Emptied\n * @desc: Script to be run when something bad happens and the file is suddenly unavailable (like unexpectedly disconnects).\n *        The equivalent of HTML attribute `onemptied`. The first parameter of the callback is the `Element` object.\n * @param:\n *     @name: callback\n *     @description: The callback function to execute when the event occurs.\n *     @type: function | null\n * @return:\n *     @type: this | Element\n *     @description: Returns the `Element` object. Unless parameter `callback` is `null`, then the attribute's value is returned.\n */\non_emptied(callback: ((element: Element, event: Event) => void) | null): this | Element {\n\tif (callback == null) { return this.onemptied; }\n\tconst e = this;\n\tthis.onemptied = (t) => callback(e, t);\n\treturn this;\n}\n","f7e9bea72e992522d93badc4793a1b1312e83a2762c0daab914130f88e7f80fd":"/**\n * @docs:\n * @title: On ended\n * @desc: \n *     Script to be run when the media has reach the end (a useful event for messages like \"thanks for listening\").\n *     The equivalent of HTML attribute `onended`.\n * @param:\n *     @name: callback\n *     @descr: The function to call when the media ends. Leave `null` to retrieve the current callback.\n *     @type: function | null\n * @return:\n *     @type: this | function\n *     @description Returns the instance of the element for chaining. Unless parameter `callback` is `null`, then the current callback function is returned.\n */\non_ended(): (e: Element, t: any) => void | null;\non_ended(callback: (e: Element, t: any) => void): this;\non_ended(callback?: (e: Element, t: any) => void | null): this | ((e: Element, t: any) => void) | null {\n    if (callback == null) { return this.onended; }\n    const e = this;\n    this.onended = (t) => callback(e, t);\n    return this;\n}\n","3166bf49b72eea38fc1b8ab70451278ae1602db676b9b943d76080b8ca5b90a3":"/**\n * @docs:\n * @title: On Error\n * @desc: Script to be run when an error occurs while loading the file, similar to HTML's `onerror` attribute. \n *        The first parameter of the callback is the `Element` object. Returns the attribute value if `value` is `null`.\n * @param:\n *     @name: callback\n *     @descr: The callback function to execute on error. It receives the `Element` object and the error event.\n *     @type: (element: Element, event: Event) => void\n * @return:\n *     @type: this | (Element | null)\n *     @description Returns the instance of the element for chaining, unless `callback` is `null`, then the current `onerror` attribute value is returned.\n */\non_error(callback: (element: Element, event: Event) => void): this;\non_error(callback: null): (Element | null);\non_error(callback?: (element: Element, event: Event) => void | null): this | (Element | null) {\n    if (callback == null) { return this.onerror; }\n    const e = this;\n    this.onerror = (t) => callback(e, t);\n    return this;\n}\n","3944b82e59feaddfac3a5a10f7bcbc6bfb46b5f08861e81e53c44d0b1bae8821":"/**\n * @docs:\n * @title: On Loaded Data\n * @desc: Script to be run when media data is loaded. The equivalent of HTML attribute `onloadeddata`. \n *        Returns the attribute value when parameter `value` is `null`.\n * @param:\n *     @name: callback\n *     @descr: The callback function that receives the `Element` object and the event.\n *     @type: function\n * @return:\n *     @type: this | Event\n *     @description Returns the `Element` object unless parameter `callback` is `null`, then the attribute's value is returned.\n */\non_loaded_data(callback: (element: Element, event: Event) => void): this;\non_loaded_data(callback: null): Event | null;\non_loaded_data(callback?: (element: Element, event: Event) => void | null): this | Event | null {\n    if (callback == null) { return this.onloadeddata; }\n    const e = this;\n    this.onloadeddata = (t) => callback(e, t);\n    return this;\n}\n","750ca8274119b7c80b65e78daf243e87ac9c5b2ffd2277c99397fc919dbe2333":"/**\n * @docs:\n * @title: On loaded metadata\n * @desc: Script to be run when meta data (like dimensions and duration) are loaded. \n *        The equivalent of HTML attribute `onloadedmetadata`. \n *        The first parameter of the callback is the `Element` object.\n * @param:\n *     @name: callback\n *     @descr: A function to be executed when metadata is loaded.\n *     @type: (element: Element, event: Event) => void\n * @return:\n *     @type: this | any\n *     @description Returns the `Element` object. Unless parameter `callback` is `null`, then the attribute's value is returned.\n */\non_loaded_metadata(callback: (element: Element, event: Event) => void): this;\non_loaded_metadata(callback: null): any;\non_loaded_metadata(callback?: (element: Element, event: Event) => void | null): this | any {\n\tif (callback == null) { return this.onloadedmetadata; }\n\tconst e = this;\n\tthis.onloadedmetadata = (t) => callback(e, t);\n\treturn this;\n}\n","a18fb7b9e375371ba20f50de7ceead8a63eb8d605735e4b80e9e7db8826efdb1":"/**\n * @docs:\n * @title: On load start\n * @desc: \n *     Script to be run just as the file begins to load before anything is actually loaded.\n *     The equivalent of HTML attribute `onloadstart`.\n *     \n *     The first parameter of the callback is the `Element` object.\n *     \n *     Returns the attribute value when parameter `value` is `null`.\n * @param:\n *     @name: value\n *     @descr: The value to assign. Leave `null` to retrieve the attribute's value.\n *     @type: function | null\n * @return:\n *     @type: this | function | null\n *     @description Returns the `Element` object. Unless parameter `value` is `null`, then the attribute's value is returned.\n */\non_load_start(): ((t: Event) => void) | null;\non_load_start(callback: (element: Element, event: Event) => void): this;\non_load_start(callback?: (element: Element, event: Event) => void | null): this | ((t: Event) => void) | null {\n\tif (callback == null) { return this.onloadstart; }\n\tconst e = this;\n\tthis.onloadstart = (t) => callback(e, t);\n\treturn this;\n}\n","7cce2b79654648d748d10181d8a05cc12e8a482d0d6d6199234cb39a3b5c317a":"/**\n * @docs:\n * @title: On Pause\n * @desc: Script to be run when the media is paused either by the user or programmatically. The equivalent of HTML attribute `onpause`.\n * @param:\n *     @name: callback\n *     @descr: The callback function to execute when the media is paused. Leave `null` to retrieve the current attribute's value.\n *     @type: function | null\n * @return:\n *     @type: this | function\n *     @description Returns the instance of the element for chaining unless the parameter is `null`, then the current attribute's value is returned.\n */\non_pause(callback: ((element: Element, event: Event) => void) | null): this | ((element: Element, event: Event) => void) {\n\tif (callback == null) { return this.onpause; }\n\tconst e = this;\n\tthis.onpause = (t) => callback(e, t);\n\treturn this;\n}\n","0418075d891e6c8251b4129e7764c27c27505713d7e9cd4498ea25db1c01d4e9":"/**\n * @docs:\n * @title: On Play\n * @desc: Script to be run when the media is ready to start playing. The equivalent of HTML attribute `onplay`. \n *        The first parameter of the callback is the `Element` object. Returns the attribute value when parameter `value` is `null`.\n * @param:\n *     @name: callback\n *     @descr: The function to be executed when the media starts playing.\n *     @type: function | null\n * @return:\n *     @type: this | Function\n *     @description Returns the `Element` object. Unless parameter `callback` is `null`, then the attribute's value is returned.\n */\non_play(): Function;\non_play(callback: (element: Element, event: Event) => void): this;\non_play(callback?: (element: Element, event: Event) => void | null): Function | this {\n    if (callback == null) { return this.onplay; }\n    const e = this;\n    this.onplay = (t) => callback(e, t);\n    return this;\n}\n","9400b0880c0e091d6d945f1d41e45fd7aa74df618e8516eb2c890082a5913e01":"/**\n * @docs:\n * @title: On Playing\n * @desc: Script to be run when the media actually has started playing. This is the equivalent of the HTML attribute `onplaying`.\n * @param:\n *     @name: callback\n *     @descr: The function to execute when the media starts playing. It receives the `Element` object as the first parameter.\n *     @type: function | null\n * @return:\n *     @type: this | function\n *     @description Returns the instance of the element for chaining. If `null` is passed, it returns the current `onplaying` callback.\n */\non_playing(callback?: ((element: Element, time: any) => void) | null): this | ((element: Element, time: any) => void) | null {\n    if (callback == null) { return this.onplaying; }\n    const e = this;\n    this.onplaying = (t) => callback(e, t);\n    return this;\n}\n","f76fa7ff397ac74ca3961e1a4c12dfc948f0e6b0c9c8871e336761afc6841c57":"/**\n * @docs:\n * @title: Onprogress\n * @desc: \n *     Script to be run when the browser is in the process of getting the media data.\n *     The equivalent of HTML attribute `onprogress`. Returns the attribute value when parameter `value` is `null`.\n * @param:\n *     @name: callback\n *     @descr: The function to be executed when the media data is being loaded.\n *     @type: (element: Element, event: Event) => void\n * @return:\n *     @type: this | ((element: Element, event: Event) => void) | null\n *     @description Returns the `Element` object. Unless parameter `callback` is `null`, then the attribute's value is returned.\n */\nonprogress(callback: ((element: Element, event: Event) => void) | null): this | ((element: Element, event: Event) => void) | null {\n    if (callback == null) { return this.onprogress; }\n    const e = this;\n    this.onprogress = (t) => callback(e, t);\n    return this;\n}\n","8dd83a20927272f8eb820c49ca43aca08309b47147f6ffd61076f437ae0ec0ee":"/**\n * @docs:\n * @title: On Rate Change\n * @desc: Script to be run each time the playback rate changes (like when a user switches to a slow motion or fast forward mode). \n *        The equivalent of HTML attribute `onratechange`. Returns the attribute value when parameter `value` is `null`.\n * @param:\n *     @name: callback\n *     @descr: The callback function to execute on rate change.\n *     @type: function\n * @return:\n *     @type: this | Function\n *     @description Returns the `Element` object unless parameter `value` is `null`, then the attribute's value is returned.\n */\non_rate_change(callback: (element: Element, rate: number) => void): this;\non_rate_change(callback?: null): Function | this;\non_rate_change(callback?: (element: Element, rate: number) => void | null): this | Function {\n\tif (callback == null) { return this.onratechange; }\n\tconst e = this;\n\tthis.onratechange = (t) => callback(e, t);\n\treturn this;\n}\n","c184f78f962c00f6a7b514bd69984941d9f5abd200de1b0a79747ee40d01db48":"/**\n * @docs:\n * @title: On seeked\n * @desc: \n *     Script to be run when the seeking attribute is set to false indicating that seeking has ended.\n *     The equivalent of HTML attribute `onseeked`.\n * @param:\n *     @name: callback\n *     @descr: The callback function to execute when seeking ends.\n *     @type: (element: Element, time: any) => void\n * @return:\n *     @type: this | any\n *     @description Returns the `Element` object. Unless parameter `value` is `null`, then the attribute's value is returned.\n */\non_seeked(callback: (element: Element, time: any) => void): this;\non_seeked(value: null): any;\non_seeked(value?: null | ((element: Element, time: any) => void)): this | any {\n\tif (value == null) { return this.onseeked; }\n\tconst e = this;\n\tthis.onseeked = (t) => value(e, t);\n\treturn this;\n}\n","f9798b2caa29ecba3dda6771c2a6d5047ef639a7cdb5c0b4e6037ae8c058c0d6":"/**\n * @docs:\n * @title: On Seeking\n * @desc: Script to be run when the seeking attribute is set to true indicating that seeking is active. \n *        The equivalent of HTML attribute `onseeking`. \n * @param:\n *     @name: callback\n *     @descr: The callback function to execute when seeking occurs.\n *     @type: function\n * @return:\n *     @type: this | any\n *     @description Returns the instance of the element for chaining. Unless parameter `callback` is `null`, then the attribute's value is returned.\n * @funcs: 2\n */\non_seeking(): any;\non_seeking(callback: (element: Element, time: any) => void): this;\non_seeking(callback?: (element: Element, time: any) => void): any {\n    if (callback == null) { return this.onseeking; }\n    const e = this;\n    this.onseeking = (t) => callback(e, t);\n    return this;\n}\n","630eaaf7259b1ea7d6ad3b156c7c8e7c9ba756a73102b6433feb887c222e7d62":"/**\n * @docs:\n * @title: On Stalled\n * @desc: Script to be run when the browser is unable to fetch the media data for whatever reason. This is the equivalent of the HTML attribute `onstalled`. The first parameter of the callback is the `Element` object.\n * @param:\n *     @name: value\n *     @description: The value to assign. Leave `null` to retrieve the attribute's value.\n *     @type: function | null\n * @return:\n *     @type: this | function | null\n *     @description: Returns the `Element` object unless parameter `value` is `null`, then the attribute's value is returned.\n * @funcs: 2\n */\non_stalled(): (event: Event) => void | null;\non_stalled(callback: (element: Element, event: Event) => void): this;\non_stalled(callback?: (element: Element, event: Event) => void | null): this | ((event: Event) => void) | null {\n\tif (callback == null) { return this.onstalled; }\n\tconst e = this;\n\tthis.onstalled = (t) => callback(e, t);\n\treturn this;\n}\n","daf0f21cd2d85d944fcb2b1dfb9acad828183a91014e8769f725db2f0a5a9922":"/**\n * @docs:\n * @title: On Suspend\n * @desc: Script to be run when fetching the media data is stopped before it is completely loaded for whatever reason. The equivalent of HTML attribute `onsuspend`.\n * @param:\n *     @name: callback\n *     @descr: The function to be executed when the suspend event occurs. The first parameter of the callback is the `Element` object.\n *     @type: Function | null\n * @return:\n *     @type: this | Function\n *     @description Returns the `Element` object. Unless parameter `value` is `null`, then the attribute's value is returned.\n */\non_suspend(callback: Function | null): this;\non_suspend(): Function | null;\non_suspend(callback?: Function | null): this | Function | null {\n\tif (callback == null) { return this.onsuspend; }\n\tconst e = this;\n\tthis.onsuspend = (t) => callback(e, t);\n\treturn this;\n}\n","c7a3c7fd0c7cd1ea4f0816f6bb642a26d97939d0e530d673ec2a77081da453b0":"/**\n * @docs:\n * @title: On Time Update\n * @desc: Script to be run when the playing position has changed (like when the user fast forwards to a different point in the media). The equivalent of HTML attribute `ontimeupdate`.\n * @param:\n *     @name: callback\n *     @descr: The callback function to execute when the time updates. The first parameter of the callback is the `Element` object.\n *     @type: function\n * @return:\n *     @type: this | Function\n *     @description Returns the `Element` object. Unless parameter `callback` is `null`, then the attribute's value is returned.\n */\non_time_update(callback: (element: Element, time: number) => void): this;\non_time_update(callback: null): Function | this;\non_time_update(callback?: (element: Element, time: number) => void | null): this | Function {\n\tif (callback == null) { return this.ontimeupdate; }\n\tconst e = this;\n\tthis.ontimeupdate = (t) => callback(e, t);\n\treturn this;\n}\n","5064ed19483fe556ca4dbdba01903643c9ec69ca156d8cf05e1c562440563b95":"/**\n * @docs:\n * @title: On Volume Change\n * @desc: Script to be run each time the volume is changed which includes setting the volume to \"mute\". \n *        The equivalent of HTML attribute `onvolumechange`. The first parameter of the callback is the `Element` object.\n * @param:\n *     @name: callback\n *     @descr: The callback function to execute on volume change.\n *     @type: function | null\n * @return:\n *     @type: this | any\n *     @description Returns the `Element` object for chaining unless parameter `value` is `null`, then the attribute's value is returned.\n */\non_volume_change(callback: ((element: Element, event: Event) => void) | null): this | any {\n    if (callback == null) { return this.onvolumechange; }\n    const e = this;\n    this.onvolumechange = (t) => callback(e, t);\n    return this;\n}\n","3db15c2d773b41948c692faaa601cf16516b873cf85a965ee2054b0d91cb8596":"/**\n * @docs:\n * @title: On Waiting\n * @desc: Script to be run when the media has paused but is expected to resume (like when the media pauses to buffer more data). The equivalent of HTML attribute `onwaiting`.\n * @param:\n *     @name: callback\n *     @descr: The callback function to execute when the media is waiting.\n *     @type: function\n * @return:\n *     @type: this | any\n *     @description Returns the `Element` object unless parameter `callback` is `null`, then the attribute's value is returned.\n * @funcs: 2\n */\non_waiting(): any;\non_waiting(callback: (element: Element, time: any) => void): this;\non_waiting(callback?: (element: Element, time: any) => void): this | any {\n\tif (callback == null) { return this.onwaiting; }\n\tconst e = this;\n\tthis.onwaiting = (t) => callback(e, t);\n\treturn this;\n}\n","20bb253d77fdd774d7267a11a8922fae7a5dee0724bd26f62833b0044c1b17a7":"/**\n * @docs:\n * @title: On toggle\n * @desc: Fires when the user opens or closes the <details> element. \n *        The equivalent of HTML attribute `ontoggle`. \n *        The first parameter of the callback is the `Element` object.\n * @param:\n *     @name: value\n *     @descr: The value to assign. Leave `null` to retrieve the attribute's value.\n *     @type: function | null\n * @return:\n *     @type: this | function\n *     @description Returns the `Element` object. Unless parameter `value` is `null`, then the attribute's value is returned.\n */\non_toggle(callback: ((element: Element, toggle: Event) => void) | null): this | ((element: Element, toggle: Event) => void) {\n    if (callback == null) { return this.ontoggle; }\n    const e = this;\n    this.ontoggle = (t) => callback(e, t);\n    return this;\n}\n"}