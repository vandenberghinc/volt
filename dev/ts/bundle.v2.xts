/*
 * Author: Daan van den Bergh
 * Copyright: Â© 2024 - 2024 Daan van den Bergh.
 */

// Imports.
import * as fs from 'fs';
import esbuild, {
    Plugin,
    BuildOptions,
    BuildResult,
    Loader,
} from 'esbuild';

// Local imports.
const Preprocessing = require("./preprocessing.js")

/**
 * Options for bundling TypeScript code.
 */
interface BundleTypescriptOptions {

    // Main entry path.
    entry_path: string,

    // Additional entry paths.
    additional_entry_paths?: string[],

    // Error limit.
    error_limit?: number,

    /**
     * Target platform: 'browser' or 'node'.
     */
    platform?: 'browser' | 'node';

    /**
     * Target platform: 'ES2023' etc.
     */
    target?: string;

    /**
     * Output format based on platform.
     * - For 'browser': 'iife' or 'umd'
     * - For 'node': 'cjs' or 'esm'
     */
    format?: 
        | 'iife'       // Immediately Invoked Function Expression (Browser)
        // | 'umd'     // Universal Module Definition (Browser/Node)
        | 'cjs'        // CommonJS (Node)
        | 'esm';       // ES Modules (Browser/Node);

    /**
     * Enable or disable minification.
     */
    minify?: boolean;

    /**
     * Enable or disable source map generation.
     */
    sourcemap?: boolean;

    /**
     * Function to preprocess TypeScript code after transpilation.
     * Receives the file path and its transpiled JavaScript content, returns modified content.
     */
    preprocess?: (file_path: string, content: string) => string | Promise<string>;

    /**
     * Custom TypeScript compiler options.
     */
    tsconfig?: Record<string, any>;
}

/**
 * Result of the bundling process.
 */
interface BundleResult {
    
    /**
     * Bundled JavaScript code.
     */
    code?: string;

    /**
     * Compilation and bundling errors, if any.
     */
    errors: any[];

    /**
     * Source map, if generated.
     */
    source_map?: string;

    /**
     * Debug function.
     */
    debug: () => void;
}

/**
 * Preprocessing plugin for esbuild.
 * Applies custom preprocessing to TypeScript files.
 * 
 * @param preprocess_function User-defined preprocess function.
 * @returns An esbuild plugin.
 */
function preprocess_plugin(preprocess_function?: (file_path: string, content: string) => string | Promise<string>): Plugin {
    return {
        name: 'preprocess-plugin',
        setup(build) {
            build.onLoad({ filter: /\.(ts|js)x?$/ }, async (args) => {
                try {
                    let content = await fs.promises.readFile(args.path, 'utf8');

                    // Apply predefined preprocessing.
                    content = Preprocessing.preprocess(args.path, content, {
                        macros: true,
                    });

                    // Apply user-defined preprocessing if provided.
                    if (preprocess_function) {
                        let result = preprocess_function(args.path, content);
                        if (result instanceof Promise) {
                            result = await result;
                        }
                        if (typeof result === 'string') {
                            content = result;
                        }
                    }

                    return {
                        contents: content,
                        loader: 'ts',
                    };
                } catch (error: any) {
                    // @todo
                    return {
                        errors: [{
                            text: `Preprocessing failed for ${args.path}: ${error.message}`,
                        }],
                    };
                }
            });
        },
    };
}

/**
 * Bundles TypeScript code into a single JavaScript file in-memory.
 * 
 * @param options Bundling options.
 * @returns A promise that resolves to the bundling result containing code, errors, and source_map.
 */
export async function bundle(options: BundleTypescriptOptions): Promise<BundleResult> {
    const {
        entry_path,
        additional_entry_paths = [],
        error_limit = 25,
        platform = 'node',
        target = 'ES2023',
        format,
        minify = false,
        sourcemap = false,
        tsconfig = {},
        preprocess,
    } = options;

    // Vars.
    let build_result: BuildResult;
    const output_files = build_result.outputFiles || [];
    let bundled_code = '';
    let bundled_map = '';

    // Load and set TypeScript compiler options.
    tsconfig.compilerOptions ??= {};
    tsconfig.compilerOptions.moduleResolution ??= 'node';
    tsconfig.compilerOptions.module = 'esnext';
    tsconfig.compilerOptions.sourceMap = sourcemap;
    tsconfig.compilerOptions.outDir = undefined;
    tsconfig.compilerOptions.target ??= target;
    tsconfig.compilerOptions.lib ??= [target, 'DOM'];
    tsconfig.compilerOptions.strict ??= true;
    tsconfig.compilerOptions.noImplicitAny ??= false;
    tsconfig.compilerOptions.skipLibCheck ??= true;
    tsconfig.compilerOptions.declaration ??= true; // Enable declaration files
    tsconfig.compilerOptions.experimentalDecorators ??= true; // Enable decorators
    tsconfig.compilerOptions.emitDecoratorMetadata ??= true; // Emit decorator metadata

    // Configure esbuild build options.
    const build_options: BuildOptions = {
        entryPoints: [entry_path, ...additional_entry_paths],
        bundle: true,
        platform: platform,
        target: target,
        format: format ?? (platform === 'node' ? 'cjs' : 'iife'),
        minify: minify,
        sourcemap: sourcemap,
        write: false, // In-memory output
        metafile: true, // Enable metafile generation
        plugins: [
            preprocess_plugin(preprocess),
        ],
        define: {
            'process.env.NODE_ENV': `"${process.env.NODE_ENV || 'production'}"`,
        },
        loader: {
            '.ts': 'ts',
            '.tsx': 'tsx',
            '.js': 'js',
            '.jsx': 'jsx',
            '.json': 'json',
        },
        ...mapTsConfigToEsbuild(tsconfig.compilerOptions),
        // tsconfig,
        // Inject the tsconfig options
        // Using esbuild's 'define' is limited; alternatively, use 'esbuild' API's 'jsxFactory', etc.
    };

    // Add debug func.
    const add_debug = (errs) => {
        return function(): void {
            if (errs.length > 0) {
                let max = Math.min(error_limit ?? errs.length, errs.length);
                for (let i = 0; i < max; i++) {
                    if (errs[i] instanceof Error) {
                        console.error(errs[i]);
                    } else {
                        console.error(errs[i].toString());
                    }
                }
                if (error_limit != null && errs.length > error_limit) {
                    console.log(`Displayed the first ${error_limit} errors out of ${errs.length}.`);
                } else {
                    console.log(`Encountered ${errs.length} errors.`);
                }
            } else {
                console.log("TypeScript compilation succeeded.");
            }
        }
    }

    // Build.
    try {
        build_result = await esbuild.build(build_options);
    } catch (error: any) {
        const errors = Array.isArray(error.errors) ? error.errors : [];
        return {
            errors,
            debug: add_debug(errors),
        };
    }

    // Create bundle.
    for (const file of output_files) {
        console.log(file)
        // Check if 'path' exists and is a string
        if ('path' in file && typeof file.path === 'string') {
            console.log("1")
            if (file.path.endsWith('.js')) {
                bundled_code = Buffer.from(file.contents).toString();
            } else if (file.path.endsWith('.js.map')) {
                bundled_map = Buffer.from(file.contents).toString();
            }
        } else {
            console.log("2")
            // Fallback: Identify based on content
            const contentStr = Buffer.from(file.contents).toString();

            // Simple heuristic: if content contains sourceMappingURL, it's likely a source map
            if (contentStr.includes('sourceMappingURL')) {
                bundled_map = contentStr;
            } else {
                bundled_code = contentStr;
            }
        }
    }

    // Collect errors from build_result
    const errors = Array.isArray(build_result.errors) ? build_result.errors : []
    console.log({
        bundled_code: bundled_code.slice(0, 1000),
        bundled_map: bundled_map.slice(0, 1000),
        errors,
    })
    return {
        code: bundled_code,
        errors,
        source_map: sourcemap ? bundled_map : undefined,
        debug: add_debug(errors),
    };
}

// Example usage:
// (async () => {
//     const result = await bundle({
//         entry_path: 'src/index.ts',
//         platform: 'node',
//         format: 'cjs',
//         sourcemap: true,
//         preprocess: async (filePath, content) => {
//             // Custom preprocessing logic
//             return content.replace(/DEBUG/g, 'true');
//         },
//     });

//     if (result.errors.length > 0) {
//         console.error('Errors:', result.errors);
//     } else {
//         console.log('Bundled Code:', result.code);
//         if (result.source_map) {
//             console.log('Source Map:', result.source_map);
//         }
//     }
// })();

