/*
 * Author: Daan van den Bergh
 * Copyright: Â© 2023 Daan van den Bergh.
 */

// ---------------------------------------------------------
// Bundle library.

// Import.
const libfs = require("fs");
const vhighlight = require(`${process.env.PERSISTANCE}/private/dev/vinc/vhighlight/vhighlight.js`);
const vlib = require(`${process.env.PERSISTANCE}/private/dev/vinc/vlib/js/vlib.js`);

// Source file.
const frontend =  `${__dirname}/../frontend/`;

// Initialize compiler.
const compiler = new vhighlight.JSCompiler({
    line_breaks: true,
    double_line_breaks: false,
    comments: false,
    white_space: false,
})

// Seperate modules not to be joined into the vweb bundle.
const seperate_modules = [
    "adyen.js",
    "paddle.js",
    "compression.js",
]

// Embed scripts
const embed_script = (input, output) => {

    // Compile data to indicate that is should not be edited.
    const path = new vlib.Path(input);
    let data = path.load_sync();
    data = compiler.compile_code(data.replaceAll("vlib", "vweb"), path.str())
    data = `const vweb = {};\n/* DO NOT EDIT THIS FILE IT IS LOCATED AT ${input}. */ \n` + data;
    if (input.includes("scheme.js")) {
        data = data.replaceAll("vweb.colors.end", "\u001b[0m")
        data = data.replaceAll("vweb.colors.yellow", "\u001b[33m")
        data += `\nconst Scheme = vweb.Scheme;\nexport { Scheme };\n`
    } else if (input.includes("date.js")) {
        data += `\nconst Date = vweb.Date;\nexport { Date };\n`
    } else {
        throw new Error("Unknown type.")
    }

    // Save.
    new vlib.Path(output).save_sync(data)
}

// Embed vlib scripts.
embed_script(`${process.env.PERSISTANCE}/private/dev/vinc/vlib/js/include/types/global/scheme.js`, frontend+"/modules/scheme.js")
embed_script(`${process.env.PERSISTANCE}/private/dev/vinc/vlib/js/include/types/global/date.js`, frontend+"/modules/date.js")

// Compile vweb.js.
const version = JSON.parse(new vlib.Path(`${__dirname}/../package.json`).load_sync()).version;
compiler._bundle_library({
    source: `${frontend}/min/`,
    name: "vweb.js",
    author: "VInc.",
    start_year: 2023,
    version,
    includes: [
        // `${frontend}/modules/vweb.js`,
        `${frontend}/modules/utils.ts`,
        `${frontend}/modules/elements.ts`,
        `${frontend}/modules/google.ts`,
        `${frontend}/modules/cookies.ts`,
        `${frontend}/modules/mutex.ts`,
        `${frontend}/ui/element.ts`,
        `${frontend}/ui/link.ts`,
        `${frontend}/ui/stack.ts`,
        `${frontend}/modules`,
        `${frontend}/libs`,
        `${frontend}/ui`,
    ],
    excludes: [".DS_Store", ...seperate_modules.iterate_append((name) => `${frontend}/modules/${name}`)],
});

// Extract globals.
const globals = compiler.extract_globals(new vlib.Path(`${frontend}/min/vweb.js`).load_sync());
new vlib.Path(`${frontend}/../backend/frontend_globals.js`).save_sync(
    "module.exports = " + JSON.stringify(globals) + ";"
)

// Bundle seperate modules.
if (!process.argv.includes("--vweb")) {
    seperate_modules.iterate((name) => {
        if (name === "compression.js") {return null;}
        compiler._bundle_library({
            source: `${frontend}/min/`,
            name: name,
            author: "VInc.",
            start_year: 2023,
            version,
            includes: [`${frontend}/modules/${name}`],
        });
    })
}


// Log.
// console.log(`Bundled into "${export_path}".`);