declare const TitleElement_base: {
    new (): {
        type: string;
        element_type: string;
        tag: string;
        _style: {};
        _attrs: {};
        classes: any[];
        _inner_html: any;
        children: any[];
        pad_numeric(value: any, padding?: string): any;
        html(): string;
        links(links: any): any;
        _links: any;
        styles(styles: any): any;
        attrs(attrs: any): any;
        events(events: any): any;
        add_class(name: any): any;
        remove_class(name: any): any;
        append(...children: any[]): any;
        inner_html(value: any): any;
        center(): any;
        padding(...values: any[]): any;
        margin(...values: any[]): any;
        fixed_width(value: any): any;
        fixed_height(value: any): any;
        frame(width: any, height: any): any;
        min_frame(width: any, height: any): any;
        max_frame(width: any, height: any): any;
        fixed_frame(width: any, height: any): any;
        color(value: any): any;
        border(...values: any[]): any;
        border_radius(value: any): any;
        background(value: any): any;
        ellipsis_overflow(to?: boolean): boolean | any;
        on_click(callback: any): any;
        lang(value: any): any;
        _lang: any;
        charset(value: any): any;
        _charset: any;
        viewport(value: any): any;
        _viewport: any;
        title(value: any): any;
        _title: any;
    };
    element_tag: string;
    default_style: null;
    default_attributes: null;
    default_events: null;
};
export class TitleElement extends TitleElement_base {
    constructor(text: any);
}
export function Title(...args: any[]): TitleElement;
declare const SubtitleElement_base: {
    new (): {
        type: string;
        element_type: string;
        tag: string;
        _style: {};
        _attrs: {};
        classes: any[];
        _inner_html: any;
        children: any[];
        pad_numeric(value: any, padding?: string): any;
        html(): string;
        links(links: any): any;
        _links: any;
        styles(styles: any): any;
        attrs(attrs: any): any;
        events(events: any): any;
        add_class(name: any): any;
        remove_class(name: any): any;
        append(...children: any[]): any;
        inner_html(value: any): any;
        center(): any;
        padding(...values: any[]): any;
        margin(...values: any[]): any;
        fixed_width(value: any): any;
        fixed_height(value: any): any;
        frame(width: any, height: any): any;
        min_frame(width: any, height: any): any;
        max_frame(width: any, height: any): any;
        fixed_frame(width: any, height: any): any;
        color(value: any): any;
        border(...values: any[]): any;
        border_radius(value: any): any;
        background(value: any): any;
        ellipsis_overflow(to?: boolean): boolean | any;
        on_click(callback: any): any;
        lang(value: any): any;
        _lang: any;
        charset(value: any): any;
        _charset: any;
        viewport(value: any): any;
        _viewport: any;
        title(value: any): any;
        _title: any;
    };
    element_tag: string;
    default_style: null;
    default_attributes: null;
    default_events: null;
};
export class SubtitleElement extends SubtitleElement_base {
    constructor(text: any);
}
export function Subtitle(...args: any[]): SubtitleElement;
declare const TextElement_base: {
    new (): {
        type: string;
        element_type: string;
        tag: string;
        _style: {};
        _attrs: {};
        classes: any[];
        _inner_html: any;
        children: any[];
        pad_numeric(value: any, padding?: string): any;
        html(): string;
        links(links: any): any;
        _links: any;
        styles(styles: any): any;
        attrs(attrs: any): any;
        events(events: any): any;
        add_class(name: any): any;
        remove_class(name: any): any;
        append(...children: any[]): any;
        inner_html(value: any): any;
        center(): any;
        padding(...values: any[]): any;
        margin(...values: any[]): any;
        fixed_width(value: any): any;
        fixed_height(value: any): any;
        frame(width: any, height: any): any;
        min_frame(width: any, height: any): any;
        max_frame(width: any, height: any): any;
        fixed_frame(width: any, height: any): any;
        color(value: any): any;
        border(...values: any[]): any;
        border_radius(value: any): any;
        background(value: any): any;
        ellipsis_overflow(to?: boolean): boolean | any;
        on_click(callback: any): any;
        lang(value: any): any;
        _lang: any;
        charset(value: any): any;
        _charset: any;
        viewport(value: any): any;
        _viewport: any;
        title(value: any): any;
        _title: any;
    };
    element_tag: string;
    default_style: null;
    default_attributes: null;
    default_events: null;
};
export class TextElement extends TextElement_base {
    constructor(text: any);
}
export function Text(...args: any[]): TextElement;
declare const ImageElement_base: {
    new (): {
        type: string;
        element_type: string;
        tag: string;
        _style: {};
        _attrs: {};
        classes: any[];
        _inner_html: any;
        children: any[];
        pad_numeric(value: any, padding?: string): any;
        html(): string;
        links(links: any): any;
        _links: any;
        styles(styles: any): any;
        attrs(attrs: any): any;
        events(events: any): any;
        add_class(name: any): any;
        remove_class(name: any): any;
        append(...children: any[]): any;
        inner_html(value: any): any;
        center(): any;
        padding(...values: any[]): any;
        margin(...values: any[]): any;
        fixed_width(value: any): any;
        fixed_height(value: any): any;
        frame(width: any, height: any): any;
        min_frame(width: any, height: any): any;
        max_frame(width: any, height: any): any;
        fixed_frame(width: any, height: any): any;
        color(value: any): any;
        border(...values: any[]): any;
        border_radius(value: any): any;
        background(value: any): any;
        ellipsis_overflow(to?: boolean): boolean | any;
        on_click(callback: any): any;
        lang(value: any): any;
        _lang: any;
        charset(value: any): any;
        _charset: any;
        viewport(value: any): any;
        _viewport: any;
        title(value: any): any;
        _title: any;
    };
    element_tag: string;
    default_style: null;
    default_attributes: null;
    default_events: null;
};
export class ImageElement extends ImageElement_base {
    constructor(src: any);
}
export function Image(...args: any[]): ImageElement;
declare const ImageMaskElement_base: {
    new (): {
        type: string;
        element_type: string;
        tag: string;
        _style: {};
        _attrs: {};
        classes: any[];
        _inner_html: any;
        children: any[];
        pad_numeric(value: any, padding?: string): any;
        html(): string;
        links(links: any): any;
        _links: any;
        styles(styles: any): any;
        attrs(attrs: any): any;
        events(events: any): any;
        add_class(name: any): any;
        remove_class(name: any): any;
        append(...children: any[]): any;
        inner_html(value: any): any;
        center(): any;
        padding(...values: any[]): any;
        margin(...values: any[]): any;
        fixed_width(value: any): any;
        fixed_height(value: any): any;
        frame(width: any, height: any): any;
        min_frame(width: any, height: any): any;
        max_frame(width: any, height: any): any;
        fixed_frame(width: any, height: any): any;
        color(value: any): any;
        border(...values: any[]): any;
        border_radius(value: any): any;
        background(value: any): any;
        ellipsis_overflow(to?: boolean): boolean | any;
        on_click(callback: any): any;
        lang(value: any): any;
        _lang: any;
        charset(value: any): any;
        _charset: any;
        viewport(value: any): any;
        _viewport: any;
        title(value: any): any;
        _title: any;
    };
    element_tag: string;
    default_style: null;
    default_attributes: null;
    default_events: null;
};
export class ImageMaskElement extends ImageMaskElement_base {
    constructor(src: any);
    mask_child: any;
    mask_color(value: any): any;
    src(value: any): any;
    _src: any;
    mask(value: any): any;
}
export function ImageMask(...args: any[]): ImageMaskElement;
declare const VStackElement_base: {
    new (): {
        type: string;
        element_type: string;
        tag: string;
        _style: {};
        _attrs: {};
        classes: any[];
        _inner_html: any;
        children: any[];
        pad_numeric(value: any, padding?: string): any;
        html(): string;
        links(links: any): any;
        _links: any;
        styles(styles: any): any;
        attrs(attrs: any): any;
        events(events: any): any;
        add_class(name: any): any;
        remove_class(name: any): any;
        append(...children: any[]): any;
        inner_html(value: any): any;
        center(): any;
        padding(...values: any[]): any;
        margin(...values: any[]): any;
        fixed_width(value: any): any;
        fixed_height(value: any): any;
        frame(width: any, height: any): any;
        min_frame(width: any, height: any): any;
        max_frame(width: any, height: any): any;
        fixed_frame(width: any, height: any): any;
        color(value: any): any;
        border(...values: any[]): any;
        border_radius(value: any): any;
        background(value: any): any;
        ellipsis_overflow(to?: boolean): boolean | any;
        on_click(callback: any): any;
        lang(value: any): any;
        _lang: any;
        charset(value: any): any;
        _charset: any;
        viewport(value: any): any;
        _viewport: any;
        title(value: any): any;
        _title: any;
    };
    element_tag: string;
    default_style: null;
    default_attributes: null;
    default_events: null;
};
export class VStackElement extends VStackElement_base {
    constructor(...children: any[]);
}
export function VStack(...args: any[]): VStackElement;
export const DividerElement: {
    new (): {
        type: string;
        element_type: string;
        tag: string;
        _style: {};
        _attrs: {};
        classes: any[];
        _inner_html: any;
        children: any[];
        pad_numeric(value: any, padding?: string): any;
        html(): string;
        links(links: any): any;
        _links: any;
        styles(styles: any): any;
        attrs(attrs: any): any;
        events(events: any): any;
        add_class(name: any): any;
        remove_class(name: any): any;
        append(...children: any[]): any;
        inner_html(value: any): any;
        center(): any;
        padding(...values: any[]): any;
        margin(...values: any[]): any;
        fixed_width(value: any): any;
        fixed_height(value: any): any;
        frame(width: any, height: any): any;
        min_frame(width: any, height: any): any;
        max_frame(width: any, height: any): any;
        fixed_frame(width: any, height: any): any;
        color(value: any): any;
        border(...values: any[]): any;
        border_radius(value: any): any;
        background(value: any): any;
        ellipsis_overflow(to?: boolean): boolean | any;
        on_click(callback: any): any;
        lang(value: any): any;
        _lang: any;
        charset(value: any): any;
        _charset: any;
        viewport(value: any): any;
        _viewport: any;
        title(value: any): any;
        _title: any;
    };
    element_tag: string;
    default_style: null;
    default_attributes: null;
    default_events: null;
};
export function Divider(...args: any[]): {
    type: string;
    element_type: string;
    tag: string;
    _style: {};
    _attrs: {};
    classes: any[];
    _inner_html: any;
    children: any[];
    pad_numeric(value: any, padding?: string): any;
    html(): string;
    links(links: any): any;
    _links: any;
    styles(styles: any): any;
    attrs(attrs: any): any;
    events(events: any): any;
    add_class(name: any): any;
    remove_class(name: any): any;
    append(...children: any[]): any;
    inner_html(value: any): any;
    center(): any;
    padding(...values: any[]): any;
    margin(...values: any[]): any;
    fixed_width(value: any): any;
    fixed_height(value: any): any;
    frame(width: any, height: any): any;
    min_frame(width: any, height: any): any;
    max_frame(width: any, height: any): any;
    fixed_frame(width: any, height: any): any;
    color(value: any): any;
    border(...values: any[]): any;
    border_radius(value: any): any;
    background(value: any): any;
    ellipsis_overflow(to?: boolean): boolean | any;
    on_click(callback: any): any;
    lang(value: any): any;
    _lang: any;
    charset(value: any): any;
    _charset: any;
    viewport(value: any): any;
    _viewport: any;
    title(value: any): any;
    _title: any;
};
declare const TableDataElement_base: {
    new (): {
        type: string;
        element_type: string;
        tag: string;
        _style: {};
        _attrs: {};
        classes: any[];
        _inner_html: any;
        children: any[];
        pad_numeric(value: any, padding?: string): any;
        html(): string;
        links(links: any): any;
        _links: any;
        styles(styles: any): any;
        attrs(attrs: any): any;
        events(events: any): any;
        add_class(name: any): any;
        remove_class(name: any): any;
        append(...children: any[]): any;
        inner_html(value: any): any;
        center(): any;
        padding(...values: any[]): any;
        margin(...values: any[]): any;
        fixed_width(value: any): any;
        fixed_height(value: any): any;
        frame(width: any, height: any): any;
        min_frame(width: any, height: any): any;
        max_frame(width: any, height: any): any;
        fixed_frame(width: any, height: any): any;
        color(value: any): any;
        border(...values: any[]): any;
        border_radius(value: any): any;
        background(value: any): any;
        ellipsis_overflow(to?: boolean): boolean | any;
        on_click(callback: any): any;
        lang(value: any): any;
        _lang: any;
        charset(value: any): any;
        _charset: any;
        viewport(value: any): any;
        _viewport: any;
        title(value: any): any;
        _title: any;
    };
    element_tag: string;
    default_style: null;
    default_attributes: null;
    default_events: null;
};
export class TableDataElement extends TableDataElement_base {
    constructor(...children: any[]);
    center(): this;
    center_vertical(): this;
    leading_vertical(): this;
    trailing_vertical(): this;
}
export function TableData(...args: any[]): TableDataElement;
declare const TableRowElement_base: {
    new (): {
        type: string;
        element_type: string;
        tag: string;
        _style: {};
        _attrs: {};
        classes: any[];
        _inner_html: any;
        children: any[];
        pad_numeric(value: any, padding?: string): any;
        html(): string;
        links(links: any): any;
        _links: any;
        styles(styles: any): any;
        attrs(attrs: any): any;
        events(events: any): any;
        add_class(name: any): any;
        remove_class(name: any): any;
        append(...children: any[]): any;
        inner_html(value: any): any;
        center(): any;
        padding(...values: any[]): any;
        margin(...values: any[]): any;
        fixed_width(value: any): any;
        fixed_height(value: any): any;
        frame(width: any, height: any): any;
        min_frame(width: any, height: any): any;
        max_frame(width: any, height: any): any;
        fixed_frame(width: any, height: any): any;
        color(value: any): any;
        border(...values: any[]): any;
        border_radius(value: any): any;
        background(value: any): any;
        ellipsis_overflow(to?: boolean): boolean | any;
        on_click(callback: any): any;
        lang(value: any): any;
        _lang: any;
        charset(value: any): any;
        _charset: any;
        viewport(value: any): any;
        _viewport: any;
        title(value: any): any;
        _title: any;
    };
    element_tag: string;
    default_style: null;
    default_attributes: null;
    default_events: null;
};
export class TableRowElement extends TableRowElement_base {
    constructor(...children: any[]);
    append(...children: any[]): this;
    current_cell: TableDataElement | undefined;
    wrap(value?: boolean): boolean | this | undefined;
    _wrap: boolean | undefined;
    center(): this;
    center_vertical(): this;
    leading_vertical(): this;
    trailing_vertical(): this;
}
export function TableRow(...args: any[]): TableRowElement;
declare const TableElement_base: {
    new (): {
        type: string;
        element_type: string;
        tag: string;
        _style: {};
        _attrs: {};
        classes: any[];
        _inner_html: any;
        children: any[];
        pad_numeric(value: any, padding?: string): any;
        html(): string;
        links(links: any): any;
        _links: any;
        styles(styles: any): any;
        attrs(attrs: any): any;
        events(events: any): any;
        add_class(name: any): any;
        remove_class(name: any): any;
        append(...children: any[]): any;
        inner_html(value: any): any;
        center(): any;
        padding(...values: any[]): any;
        margin(...values: any[]): any;
        fixed_width(value: any): any;
        fixed_height(value: any): any;
        frame(width: any, height: any): any;
        min_frame(width: any, height: any): any;
        max_frame(width: any, height: any): any;
        fixed_frame(width: any, height: any): any;
        color(value: any): any;
        border(...values: any[]): any;
        border_radius(value: any): any;
        background(value: any): any;
        ellipsis_overflow(to?: boolean): boolean | any;
        on_click(callback: any): any;
        lang(value: any): any;
        _lang: any;
        charset(value: any): any;
        _charset: any;
        viewport(value: any): any;
        _viewport: any;
        title(value: any): any;
        _title: any;
    };
    element_tag: string;
    default_style: null;
    default_attributes: null;
    default_events: null;
};
export class TableElement extends TableElement_base {
    constructor(...children: any[]);
    current_row: TableRowElement;
    row(...children: any[]): this;
    current_cell: any;
    append(...children: any[]): this;
}
export function Table(...args: any[]): TableElement;
declare const CSSElement_base: {
    new (): {
        type: string;
        element_type: string;
        tag: string;
        _style: {};
        _attrs: {};
        classes: any[];
        _inner_html: any;
        children: any[];
        pad_numeric(value: any, padding?: string): any;
        html(): string;
        links(links: any): any;
        _links: any;
        styles(styles: any): any;
        attrs(attrs: any): any;
        events(events: any): any;
        add_class(name: any): any;
        remove_class(name: any): any;
        append(...children: any[]): any;
        inner_html(value: any): any;
        center(): any;
        padding(...values: any[]): any;
        margin(...values: any[]): any;
        fixed_width(value: any): any;
        fixed_height(value: any): any;
        frame(width: any, height: any): any;
        min_frame(width: any, height: any): any;
        max_frame(width: any, height: any): any;
        fixed_frame(width: any, height: any): any;
        color(value: any): any;
        border(...values: any[]): any;
        border_radius(value: any): any;
        background(value: any): any;
        ellipsis_overflow(to?: boolean): boolean | any;
        on_click(callback: any): any;
        lang(value: any): any;
        _lang: any;
        charset(value: any): any;
        _charset: any;
        viewport(value: any): any;
        _viewport: any;
        title(value: any): any;
        _title: any;
    };
    element_tag: string;
    default_style: null;
    default_attributes: null;
    default_events: null;
};
export class CSSElement extends CSSElement_base {
    constructor(style: any);
}
export function CSS(...args: any[]): CSSElement;
declare const MailElement_base: {
    new (): {
        type: string;
        element_type: string;
        tag: string;
        _style: {};
        _attrs: {};
        classes: any[];
        _inner_html: any;
        children: any[];
        pad_numeric(value: any, padding?: string): any;
        html(): string;
        links(links: any): any;
        _links: any;
        styles(styles: any): any;
        attrs(attrs: any): any;
        events(events: any): any;
        add_class(name: any): any;
        remove_class(name: any): any;
        append(...children: any[]): any;
        inner_html(value: any): any;
        center(): any;
        padding(...values: any[]): any;
        margin(...values: any[]): any;
        fixed_width(value: any): any;
        fixed_height(value: any): any;
        frame(width: any, height: any): any;
        min_frame(width: any, height: any): any;
        max_frame(width: any, height: any): any;
        fixed_frame(width: any, height: any): any;
        color(value: any): any;
        border(...values: any[]): any;
        border_radius(value: any): any;
        background(value: any): any;
        ellipsis_overflow(to?: boolean): boolean | any;
        on_click(callback: any): any;
        lang(value: any): any;
        _lang: any;
        charset(value: any): any;
        _charset: any;
        viewport(value: any): any;
        _viewport: any;
        title(value: any): any;
        _title: any;
    };
    element_tag: string;
    default_style: null;
    default_attributes: null;
    default_events: null;
};
export class MailElement extends MailElement_base {
    constructor(...children: any[]);
    _subject: any;
    subject(subj: any): any;
}
export function Mail(...args: any[]): MailElement;
export declare function Element(): {
    type: string;
    element_type: string;
    tag: string;
    _style: {};
    _attrs: {};
    classes: any[];
    _inner_html: any;
    children: any[];
    pad_numeric(value: any, padding?: string): any;
    html(): string;
    links(links: any): any;
    _links: any;
    styles(styles: any): any;
    attrs(attrs: any): any;
    events(events: any): any;
    add_class(name: any): any;
    remove_class(name: any): any;
    append(...children: any[]): any;
    inner_html(value: any): any;
    center(): any;
    padding(...values: any[]): any;
    margin(...values: any[]): any;
    fixed_width(value: any): any;
    fixed_height(value: any): any;
    frame(width: any, height: any): any;
    min_frame(width: any, height: any): any;
    max_frame(width: any, height: any): any;
    fixed_frame(width: any, height: any): any;
    color(value: any): any;
    border(...values: any[]): any;
    border_radius(value: any): any;
    background(value: any): any;
    ellipsis_overflow(to?: boolean): boolean | any;
    on_click(callback: any): any;
    lang(value: any): any;
    _lang: any;
    charset(value: any): any;
    _charset: any;
    viewport(value: any): any;
    _viewport: any;
    title(value: any): any;
    _title: any;
};
export {};
