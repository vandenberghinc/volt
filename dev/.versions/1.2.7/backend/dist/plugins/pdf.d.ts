declare const PDFElement_base: {
    new (...children: any[]): {
        type: any;
        _parent: any;
        _children: any[];
        _text: any;
        _img: any;
        _options: {};
        _calls: {};
        _id: any;
        _width: any;
        _height: any;
        _stretch: any;
        _margin: number[];
        _padding: number[];
        _position: null[];
        _background: any;
        _border_radius: any;
        _border_color: any;
        _border_width: number;
        _font: any;
        _font_weight: any;
        _href: any;
        _force_same_page: boolean;
        _page: any;
        _valign: any;
        is_text: boolean;
        is_img: boolean;
        is_hstack: boolean;
        is_stack: boolean;
        copy(): any;
        _set_styling(doc: any): void;
        _restore: {} | undefined;
        _restore_styling(doc: any): void;
        _has_whitespace(): boolean;
        _compute(doc: any, x: any, y: any, page: any, refresh?: boolean): any;
        _max_x: any;
        _max_width: number | undefined;
        _wrap_x: any;
        _wrap_y: number | undefined;
        _computed: Computed | undefined;
        _build(doc: any): void;
        toString(indent?: number): string;
        text(val: any): any;
        children: any[];
        append(...children: any[]): any;
        insert_before(relative: any, child: any): any;
        insert_after(relative: any, child: any): any;
        remove_child(child: any): any;
        remove_children(): any;
        id(val: any): any;
        href(val: any): any;
        force_same_page(val: any): boolean | any;
        page(val: any): any;
        margin(...values: any[]): number[] | any;
        margin_top(val: any): number | any;
        margin_right(val: any): number | any;
        margin_bottom(val: any): number | any;
        margin_left(val: any): number | any;
        padding(...values: any[]): number[] | any;
        padding_top(val: any): number | any;
        padding_right(val: any): number | any;
        padding_bottom(val: any): number | any;
        padding_left(val: any): number | any;
        position(...values: any[]): null[] | any;
        top(val: any): any | null;
        right(val: any): any | null;
        bottom(val: any): any | null;
        left(val: any): any | null;
        align(val: any): any;
        leading(): any;
        center(): any;
        trailing(): any;
        justify(): any;
        width(val: any): any;
        height(val: any): any;
        stretch(val: any): any;
        font_family(val: any): any;
        font_size(val: any): any;
        font_weight(val: any): any;
        color(val: any): any;
        background(val: any): any;
        border_radius(val: any): any;
        border_color(val: any): any;
        border_width(val: any): number | any;
        align_vertical(val: any): any;
        leading_vertical(): any;
        center_vertical(): any;
        trailing_vertical(): any;
    };
};
export class PDFElement extends PDFElement_base {
    _is_built: boolean;
    _fonts: any[];
    _create_doc(): jsPDF;
    _doc: jsPDF | undefined;
    build(): this;
    max_page(): number;
    iterate_pages(callback: any): this;
    number_pages({ align, margin, font_size, color, }: {
        align?: string | undefined;
        margin?: number | undefined;
        font_size?: number | undefined;
        color?: string | undefined;
    }): this;
    add_font(name?: string, style?: string, path?: string): this;
    save(path: any): void;
    bytes(): Promise<any>;
    stream(): any;
}
declare const PageElement_base: {
    new (...children: any[]): {
        type: any;
        _parent: any;
        _children: any[];
        _text: any;
        _img: any;
        _options: {};
        _calls: {};
        _id: any;
        _width: any;
        _height: any;
        _stretch: any;
        _margin: number[];
        _padding: number[];
        _position: null[];
        _background: any;
        _border_radius: any;
        _border_color: any;
        _border_width: number;
        _font: any;
        _font_weight: any;
        _href: any;
        _force_same_page: boolean;
        _page: any;
        _valign: any;
        is_text: boolean;
        is_img: boolean;
        is_hstack: boolean;
        is_stack: boolean;
        copy(): any;
        _set_styling(doc: any): void;
        _restore: {} | undefined;
        _restore_styling(doc: any): void;
        _has_whitespace(): boolean;
        _compute(doc: any, x: any, y: any, page: any, refresh?: boolean): any;
        _max_x: any;
        _max_width: number | undefined;
        _wrap_x: any;
        _wrap_y: number | undefined;
        _computed: Computed | undefined;
        _build(doc: any): void;
        toString(indent?: number): string;
        text(val: any): any;
        children: any[];
        append(...children: any[]): any;
        insert_before(relative: any, child: any): any;
        insert_after(relative: any, child: any): any;
        remove_child(child: any): any;
        remove_children(): any;
        id(val: any): any;
        href(val: any): any;
        force_same_page(val: any): boolean | any;
        page(val: any): any;
        margin(...values: any[]): number[] | any;
        margin_top(val: any): number | any;
        margin_right(val: any): number | any;
        margin_bottom(val: any): number | any;
        margin_left(val: any): number | any;
        padding(...values: any[]): number[] | any;
        padding_top(val: any): number | any;
        padding_right(val: any): number | any;
        padding_bottom(val: any): number | any;
        padding_left(val: any): number | any;
        position(...values: any[]): null[] | any;
        top(val: any): any | null;
        right(val: any): any | null;
        bottom(val: any): any | null;
        left(val: any): any | null;
        align(val: any): any;
        leading(): any;
        center(): any;
        trailing(): any;
        justify(): any;
        width(val: any): any;
        height(val: any): any;
        stretch(val: any): any;
        font_family(val: any): any;
        font_size(val: any): any;
        font_weight(val: any): any;
        color(val: any): any;
        background(val: any): any;
        border_radius(val: any): any;
        border_color(val: any): any;
        border_width(val: any): number | any;
        align_vertical(val: any): any;
        leading_vertical(): any;
        center_vertical(): any;
        trailing_vertical(): any;
    };
};
export class PageElement extends PageElement_base {
}
declare const VStackElement_base: {
    new (...children: any[]): {
        type: any;
        _parent: any;
        _children: any[];
        _text: any;
        _img: any;
        _options: {};
        _calls: {};
        _id: any;
        _width: any;
        _height: any;
        _stretch: any;
        _margin: number[];
        _padding: number[];
        _position: null[];
        _background: any;
        _border_radius: any;
        _border_color: any;
        _border_width: number;
        _font: any;
        _font_weight: any;
        _href: any;
        _force_same_page: boolean;
        _page: any;
        _valign: any;
        is_text: boolean;
        is_img: boolean;
        is_hstack: boolean;
        is_stack: boolean;
        copy(): any;
        _set_styling(doc: any): void;
        _restore: {} | undefined;
        _restore_styling(doc: any): void;
        _has_whitespace(): boolean;
        _compute(doc: any, x: any, y: any, page: any, refresh?: boolean): any;
        _max_x: any;
        _max_width: number | undefined;
        _wrap_x: any;
        _wrap_y: number | undefined;
        _computed: Computed | undefined;
        _build(doc: any): void;
        toString(indent?: number): string;
        text(val: any): any;
        children: any[];
        append(...children: any[]): any;
        insert_before(relative: any, child: any): any;
        insert_after(relative: any, child: any): any;
        remove_child(child: any): any;
        remove_children(): any;
        id(val: any): any;
        href(val: any): any;
        force_same_page(val: any): boolean | any;
        page(val: any): any;
        margin(...values: any[]): number[] | any;
        margin_top(val: any): number | any;
        margin_right(val: any): number | any;
        margin_bottom(val: any): number | any;
        margin_left(val: any): number | any;
        padding(...values: any[]): number[] | any;
        padding_top(val: any): number | any;
        padding_right(val: any): number | any;
        padding_bottom(val: any): number | any;
        padding_left(val: any): number | any;
        position(...values: any[]): null[] | any;
        top(val: any): any | null;
        right(val: any): any | null;
        bottom(val: any): any | null;
        left(val: any): any | null;
        align(val: any): any;
        leading(): any;
        center(): any;
        trailing(): any;
        justify(): any;
        width(val: any): any;
        height(val: any): any;
        stretch(val: any): any;
        font_family(val: any): any;
        font_size(val: any): any;
        font_weight(val: any): any;
        color(val: any): any;
        background(val: any): any;
        border_radius(val: any): any;
        border_color(val: any): any;
        border_width(val: any): number | any;
        align_vertical(val: any): any;
        leading_vertical(): any;
        center_vertical(): any;
        trailing_vertical(): any;
    };
};
export class VStackElement extends VStackElement_base {
}
declare const HStackElement_base: {
    new (...children: any[]): {
        type: any;
        _parent: any;
        _children: any[];
        _text: any;
        _img: any;
        _options: {};
        _calls: {};
        _id: any;
        _width: any;
        _height: any;
        _stretch: any;
        _margin: number[];
        _padding: number[];
        _position: null[];
        _background: any;
        _border_radius: any;
        _border_color: any;
        _border_width: number;
        _font: any;
        _font_weight: any;
        _href: any;
        _force_same_page: boolean;
        _page: any;
        _valign: any;
        is_text: boolean;
        is_img: boolean;
        is_hstack: boolean;
        is_stack: boolean;
        copy(): any;
        _set_styling(doc: any): void;
        _restore: {} | undefined;
        _restore_styling(doc: any): void;
        _has_whitespace(): boolean;
        _compute(doc: any, x: any, y: any, page: any, refresh?: boolean): any;
        _max_x: any;
        _max_width: number | undefined;
        _wrap_x: any;
        _wrap_y: number | undefined;
        _computed: Computed | undefined;
        _build(doc: any): void;
        toString(indent?: number): string;
        text(val: any): any;
        children: any[];
        append(...children: any[]): any;
        insert_before(relative: any, child: any): any;
        insert_after(relative: any, child: any): any;
        remove_child(child: any): any;
        remove_children(): any;
        id(val: any): any;
        href(val: any): any;
        force_same_page(val: any): boolean | any;
        page(val: any): any;
        margin(...values: any[]): number[] | any;
        margin_top(val: any): number | any;
        margin_right(val: any): number | any;
        margin_bottom(val: any): number | any;
        margin_left(val: any): number | any;
        padding(...values: any[]): number[] | any;
        padding_top(val: any): number | any;
        padding_right(val: any): number | any;
        padding_bottom(val: any): number | any;
        padding_left(val: any): number | any;
        position(...values: any[]): null[] | any;
        top(val: any): any | null;
        right(val: any): any | null;
        bottom(val: any): any | null;
        left(val: any): any | null;
        align(val: any): any;
        leading(): any;
        center(): any;
        trailing(): any;
        justify(): any;
        width(val: any): any;
        height(val: any): any;
        stretch(val: any): any;
        font_family(val: any): any;
        font_size(val: any): any;
        font_weight(val: any): any;
        color(val: any): any;
        background(val: any): any;
        border_radius(val: any): any;
        border_color(val: any): any;
        border_width(val: any): number | any;
        align_vertical(val: any): any;
        leading_vertical(): any;
        center_vertical(): any;
        trailing_vertical(): any;
    };
};
export class HStackElement extends HStackElement_base {
}
declare const TextElement_base: {
    new (...children: any[]): {
        type: any;
        _parent: any;
        _children: any[];
        _text: any;
        _img: any;
        _options: {};
        _calls: {};
        _id: any;
        _width: any;
        _height: any;
        _stretch: any;
        _margin: number[];
        _padding: number[];
        _position: null[];
        _background: any;
        _border_radius: any;
        _border_color: any;
        _border_width: number;
        _font: any;
        _font_weight: any;
        _href: any;
        _force_same_page: boolean;
        _page: any;
        _valign: any;
        is_text: boolean;
        is_img: boolean;
        is_hstack: boolean;
        is_stack: boolean;
        copy(): any;
        _set_styling(doc: any): void;
        _restore: {} | undefined;
        _restore_styling(doc: any): void;
        _has_whitespace(): boolean;
        _compute(doc: any, x: any, y: any, page: any, refresh?: boolean): any;
        _max_x: any;
        _max_width: number | undefined;
        _wrap_x: any;
        _wrap_y: number | undefined;
        _computed: Computed | undefined;
        _build(doc: any): void;
        toString(indent?: number): string;
        text(val: any): any;
        children: any[];
        append(...children: any[]): any;
        insert_before(relative: any, child: any): any;
        insert_after(relative: any, child: any): any;
        remove_child(child: any): any;
        remove_children(): any;
        id(val: any): any;
        href(val: any): any;
        force_same_page(val: any): boolean | any;
        page(val: any): any;
        margin(...values: any[]): number[] | any;
        margin_top(val: any): number | any;
        margin_right(val: any): number | any;
        margin_bottom(val: any): number | any;
        margin_left(val: any): number | any;
        padding(...values: any[]): number[] | any;
        padding_top(val: any): number | any;
        padding_right(val: any): number | any;
        padding_bottom(val: any): number | any;
        padding_left(val: any): number | any;
        position(...values: any[]): null[] | any;
        top(val: any): any | null;
        right(val: any): any | null;
        bottom(val: any): any | null;
        left(val: any): any | null;
        align(val: any): any;
        leading(): any;
        center(): any;
        trailing(): any;
        justify(): any;
        width(val: any): any;
        height(val: any): any;
        stretch(val: any): any;
        font_family(val: any): any;
        font_size(val: any): any;
        font_weight(val: any): any;
        color(val: any): any;
        background(val: any): any;
        border_radius(val: any): any;
        border_color(val: any): any;
        border_width(val: any): number | any;
        align_vertical(val: any): any;
        leading_vertical(): any;
        center_vertical(): any;
        trailing_vertical(): any;
    };
};
export class TextElement extends TextElement_base {
    constructor(text?: string);
    _text: string;
}
declare const ImageElement_base: {
    new (...children: any[]): {
        type: any;
        _parent: any;
        _children: any[];
        _text: any;
        _img: any;
        _options: {};
        _calls: {};
        _id: any;
        _width: any;
        _height: any;
        _stretch: any;
        _margin: number[];
        _padding: number[];
        _position: null[];
        _background: any;
        _border_radius: any;
        _border_color: any;
        _border_width: number;
        _font: any;
        _font_weight: any;
        _href: any;
        _force_same_page: boolean;
        _page: any;
        _valign: any;
        is_text: boolean;
        is_img: boolean;
        is_hstack: boolean;
        is_stack: boolean;
        copy(): any;
        _set_styling(doc: any): void;
        _restore: {} | undefined;
        _restore_styling(doc: any): void;
        _has_whitespace(): boolean;
        _compute(doc: any, x: any, y: any, page: any, refresh?: boolean): any;
        _max_x: any;
        _max_width: number | undefined;
        _wrap_x: any;
        _wrap_y: number | undefined;
        _computed: Computed | undefined;
        _build(doc: any): void;
        toString(indent?: number): string;
        text(val: any): any;
        children: any[];
        append(...children: any[]): any;
        insert_before(relative: any, child: any): any;
        insert_after(relative: any, child: any): any;
        remove_child(child: any): any;
        remove_children(): any;
        id(val: any): any;
        href(val: any): any;
        force_same_page(val: any): boolean | any;
        page(val: any): any;
        margin(...values: any[]): number[] | any;
        margin_top(val: any): number | any;
        margin_right(val: any): number | any;
        margin_bottom(val: any): number | any;
        margin_left(val: any): number | any;
        padding(...values: any[]): number[] | any;
        padding_top(val: any): number | any;
        padding_right(val: any): number | any;
        padding_bottom(val: any): number | any;
        padding_left(val: any): number | any;
        position(...values: any[]): null[] | any;
        top(val: any): any | null;
        right(val: any): any | null;
        bottom(val: any): any | null;
        left(val: any): any | null;
        align(val: any): any;
        leading(): any;
        center(): any;
        trailing(): any;
        justify(): any;
        width(val: any): any;
        height(val: any): any;
        stretch(val: any): any;
        font_family(val: any): any;
        font_size(val: any): any;
        font_weight(val: any): any;
        color(val: any): any;
        background(val: any): any;
        border_radius(val: any): any;
        border_color(val: any): any;
        border_width(val: any): number | any;
        align_vertical(val: any): any;
        leading_vertical(): any;
        center_vertical(): any;
        trailing_vertical(): any;
    };
};
export class ImageElement extends ImageElement_base {
    constructor(img: any);
}
declare const CodeBlockElement_base: {
    new (...children: any[]): {
        type: any;
        _parent: any;
        _children: any[];
        _text: any;
        _img: any;
        _options: {};
        _calls: {};
        _id: any;
        _width: any;
        _height: any;
        _stretch: any;
        _margin: number[];
        _padding: number[];
        _position: null[];
        _background: any;
        _border_radius: any;
        _border_color: any;
        _border_width: number;
        _font: any;
        _font_weight: any;
        _href: any;
        _force_same_page: boolean;
        _page: any;
        _valign: any;
        is_text: boolean;
        is_img: boolean;
        is_hstack: boolean;
        is_stack: boolean;
        copy(): any;
        _set_styling(doc: any): void;
        _restore: {} | undefined;
        _restore_styling(doc: any): void;
        _has_whitespace(): boolean;
        _compute(doc: any, x: any, y: any, page: any, refresh?: boolean): any;
        _max_x: any;
        _max_width: number | undefined;
        _wrap_x: any;
        _wrap_y: number | undefined;
        _computed: Computed | undefined;
        _build(doc: any): void;
        toString(indent?: number): string;
        text(val: any): any;
        children: any[];
        append(...children: any[]): any;
        insert_before(relative: any, child: any): any;
        insert_after(relative: any, child: any): any;
        remove_child(child: any): any;
        remove_children(): any;
        id(val: any): any;
        href(val: any): any;
        force_same_page(val: any): boolean | any;
        page(val: any): any;
        margin(...values: any[]): number[] | any;
        margin_top(val: any): number | any;
        margin_right(val: any): number | any;
        margin_bottom(val: any): number | any;
        margin_left(val: any): number | any;
        padding(...values: any[]): number[] | any;
        padding_top(val: any): number | any;
        padding_right(val: any): number | any;
        padding_bottom(val: any): number | any;
        padding_left(val: any): number | any;
        position(...values: any[]): null[] | any;
        top(val: any): any | null;
        right(val: any): any | null;
        bottom(val: any): any | null;
        left(val: any): any | null;
        align(val: any): any;
        leading(): any;
        center(): any;
        trailing(): any;
        justify(): any;
        width(val: any): any;
        height(val: any): any;
        stretch(val: any): any;
        font_family(val: any): any;
        font_size(val: any): any;
        font_weight(val: any): any;
        color(val: any): any;
        background(val: any): any;
        border_radius(val: any): any;
        border_color(val: any): any;
        border_width(val: any): number | any;
        align_vertical(val: any): any;
        leading_vertical(): any;
        center_vertical(): any;
        trailing_vertical(): any;
    };
};
export class CodeBlockElement extends CodeBlockElement_base {
    static menlo_initialized: boolean;
    static build_tokens(tokens: any): any;
    constructor(language: any, code: any);
    _language: any;
    _code: any;
    _initialized: boolean;
    _background: string;
    _border_radius: number;
    _border_color: string;
    _font: string;
    _initialize(): this;
}
declare class Computed {
    static ids: number;
    constructor({ start_x, start_y, resume_x, resume_y, inner_width, inner_height, is_absolute, is_wrapped, start_page, end_page, _padding, _margin, }: {
        start_x: any;
        start_y: any;
        resume_x: any;
        resume_y: any;
        inner_width?: number | undefined;
        inner_height?: number | undefined;
        is_absolute?: boolean | undefined;
        is_wrapped?: boolean | undefined;
        start_page?: number | undefined;
        end_page?: number | undefined;
        _padding: any;
        _margin: any;
    });
    start_x: any;
    start_y: any;
    resume_x: any;
    resume_y: any;
    inner_width: number;
    inner_height: number;
    is_absolute: boolean;
    is_wrapped: boolean;
    start_page: number;
    end_page: number;
    allow_force_same_page: boolean;
    _margin: any;
    _padding: any;
    _id: number;
    get end_x(): any;
    get end_y(): any;
    get margin_start_x(): any;
    get margin_end_x(): number;
    get margin_start_y(): any;
    get margin_end_y(): number;
    get padding_start_x(): any;
    get padding_end_x(): number;
    get padding_start_y(): any;
    get padding_end_y(): number;
    toString(): {
        id: number;
        start_x: any;
        start_y: any;
        resume_x: any;
        resume_y: any;
        inner_width: number;
        inner_height: number;
        is_absolute: boolean;
        is_wrapped: boolean;
        start_page: number;
        end_page: number;
        _margin: any;
        _padding: any;
        end_x: any;
        end_y: any;
        margin_start_x: any;
        margin_end_x: number;
        margin_start_y: any;
        margin_end_y: number;
        padding_start_x: any;
        padding_end_x: number;
        padding_start_y: any;
        padding_end_y: number;
    };
}
import { jsPDF } from "jspdf";
export declare function PDF(...args: any[]): PDFElement;
export declare function Page(...args: any[]): any;
export declare function VStack(...args: any[]): any;
export declare function HStack(...args: any[]): any;
export declare function Text(...args: any[]): any;
export declare function Image(...args: any[]): any;
export declare function CodeBlock(...args: any[]): any;
export {};
