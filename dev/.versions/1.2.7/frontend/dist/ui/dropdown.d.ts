import { VStackElement, HStackElement, AnchorHStackElement } from "./stack";
type DropdownCallback = (element: DropdownElement) => void;
export declare class DropdownElement extends VStackElement {
    target: HTMLElement;
    animate: boolean;
    duration: number;
    side?: string;
    use_target_min: boolean;
    auto_remove: boolean;
    _min_width?: number;
    _max_width?: number;
    _min_height?: number;
    _max_height?: number;
    below_target: boolean;
    x_offset: number;
    y_offset: number;
    content_items: (AnchorHStackElement | HStackElement)[];
    on_expand_callback?: DropdownCallback;
    on_minimize_callback?: DropdownCallback;
    mouse_over_background: string;
    mouse_out_opacity: number;
    _content_padding: (string | number)[];
    _content_margin: (string | number)[];
    constructor({ target, animate, duration, side, auto_remove, min_width, max_width, min_height, max_height, use_target_min, below_target, x_offset, y_offset, content, }: {
        target: HTMLElement;
        animate?: boolean;
        duration?: number;
        side?: string;
        auto_remove: boolean;
        min_width?: number;
        max_width?: number;
        min_height?: number;
        max_height?: number;
        use_target_min?: boolean;
        below_target?: boolean;
        x_offset?: number;
        y_offset?: number;
        content?: {
            text: string;
            image?: string;
            image_padding?: number;
            image_top?: number;
            href?: string;
            callback?: Function;
            on_click?: Function;
            on_click_redirect?: string;
            anchor?: boolean;
        };
    });
    _get_frame(): void;
    toggle(): this;
    expand(): this;
    minimize(force?: boolean): this;
    on_expand(): undefined | DropdownCallback;
    on_expand(callback: DropdownCallback): this;
    on_minimize(): undefined | DropdownCallback;
    on_minimize(callback: DropdownCallback): this;
    font_size(): string;
    font_size(value: string | number): this;
    color(): string;
    color(value: string): this;
    iterate_content(callback: (element: AnchorHStackElement | HStackElement) => any): this;
    content_padding(): (string | number)[];
    content_padding(...args: (string | number)[]): this;
    content_margin(): (string | number)[];
    content_margin(...args: (string | number)[]): this;
    content_background(): string;
    content_background(value: string): this;
    content_opacity(): number;
    content_opacity(value: number): this;
}
export declare const Dropdown: (...args: any[]) => any;
export {};
