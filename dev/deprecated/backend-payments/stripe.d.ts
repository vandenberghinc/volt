export = Stripe;
declare class Stripe {
    constructor({ secret_key, webhook_key, automatic_tax, return_url, products, on_refund, on_refund_request, on_refund_failed, on_payment_requires_action, on_payment_failed, on_payment, on_susbcription, on_susbcription_cancelled, _server, }: {
        secret_key: any;
        webhook_key: any;
        automatic_tax?: boolean | undefined;
        return_url?: null | undefined;
        products?: never[] | undefined;
        on_refund?: null | undefined;
        on_refund_request?: null | undefined;
        on_refund_failed?: null | undefined;
        on_payment_requires_action?: null | undefined;
        on_payment_failed?: null | undefined;
        on_payment?: null | undefined;
        on_susbcription?: null | undefined;
        on_susbcription_cancelled?: null | undefined;
        _server: any;
    });
    stripe: any;
    webhook_key: any;
    automatic_tax: boolean;
    return_url: string;
    products: any[];
    on_refund: any;
    on_refund_request: any;
    on_refund_failed: any;
    on_payment_requires_action: any;
    on_payment_failed: any;
    on_payment: any;
    on_susbcription: any;
    on_susbcription_cancelled: any;
    server: any;
    _parse_as_list(data: any): any;
    _parse_refund(refund: any): void;
    _sys_has_cid(uid: any): any;
    _sys_load_cid(uid: any): any;
    _sys_load_uid_by_cid(cid: any): any;
    _sys_save_cid(uid: any, cid: any): void;
    _sys_delete_cid(uid: any, cid: any): void;
    _sys_add_subscription(uid: any, prod_id: any, sub_id: any): void;
    _sys_remove_subscription(uid: any, prod_id: any): null | undefined;
    _sys_check_subscription(uid: any, prod_id: any, load_sub_id?: boolean): any;
    _sys_get_subscriptions(uid: any): any[];
    _sys_add_open_refund(uid: any, id: any, payment: any): void;
    _sys_remove_open_refund(uid: any, id: any): void;
    _sys_get_open_refund(uid: any, id: any): any;
    _sys_get_open_refunds(uid?: null): any[];
    _get_price(price_id: any): Promise<any>;
    _deactivate_price(price_id: any): Promise<any>;
    _create_price(product: any): Promise<void>;
    _get_product(product_id: any): Promise<any>;
    _get_products(): Promise<any>;
    _create_product(product: any): Promise<void>;
    _update_product(product: any, stripe_product: any): Promise<void>;
    _deactivate_product(stripe_product: any): Promise<void>;
    _get_subscription(sub_id: any): Promise<any>;
    _cancel_subscription(sub_id: any): Promise<void>;
    _cancel_all_subscriptions(price_id: any): Promise<void>;
    _initialize_products(): Promise<null | undefined>;
    _register_webhook(): Promise<void>;
    _create_webhook(): {
        method: string;
        endpoint: string;
        content_type: string;
        rate_limit: number;
        rate_limit_duration: number;
        callback: (request: any, response: any) => Promise<any>;
    };
    _initialize(): Promise<void>;
    get_product(id: any, throw_err?: boolean): Promise<any>;
    get_products(): Promise<any[]>;
    get_cid(uid: any): Promise<any>;
    create_customer(email: any, first_name: any, last_name: any): Promise<any>;
    delete_customer(uid: any): Promise<void>;
    update_customer(uid: any, user: any): Promise<void>;
    create_payment({ uid, cart, address, cid, email, first_name, last_name }: {
        uid: any;
        cart?: never[] | undefined;
        address?: null | undefined;
        cid?: null | undefined;
        email?: null | undefined;
        first_name?: null | undefined;
        last_name?: null | undefined;
    }): Promise<{
        id: any;
        client_secret: any;
    }>;
    get_payments({ uid, status, days, ending_before, starting_after, refunded, limit, }: {
        uid: any;
        status?: null | undefined;
        days?: null | undefined;
        ending_before?: null | undefined;
        starting_after?: null | undefined;
        refunded?: null | undefined;
        limit?: null | undefined;
    }): Promise<any[]>;
    get_subscriptions(uid: any): Promise<any[]>;
    is_subscribed(uid: any, id: any): Promise<any>;
    get_subscription(uid: any, id: any): Promise<any>;
    get_subscription_obj(id: any): Promise<any>;
    cancel_subscription(uid: any, id: any, sub_id?: null): Promise<void>;
    get_refundable_payments({ uid, days, refunded, limit }: {
        uid: any;
        days?: number | undefined;
        refunded?: null | undefined;
        limit?: null | undefined;
    }): Promise<any[]>;
    create_refund({ payment, auto_advance }: {
        payment?: null | undefined;
        auto_advance?: boolean | undefined;
    }): Promise<any>;
    get_open_refunds(uid?: null): Promise<any[]>;
    get_open_refund(uid: any, id: any): Promise<any>;
}
