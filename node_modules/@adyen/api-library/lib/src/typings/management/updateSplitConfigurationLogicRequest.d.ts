import { AdditionalCommission } from './additionalCommission';
import { Commission } from './commission';
export declare class UpdateSplitConfigurationLogicRequest {
    /**
    * Specifies the logic to apply when booking the transaction fees. Should be combined with adyenFees.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**.
    */
    'acquiringFees'?: UpdateSplitConfigurationLogicRequest.AcquiringFeesEnum;
    'additionalCommission'?: AdditionalCommission;
    /**
    * Specifies the logic to apply when booking the transaction fees. Should be combined with schemeFee, interchange & adyenMarkup.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**.
    */
    'adyenCommission'?: UpdateSplitConfigurationLogicRequest.AdyenCommissionEnum;
    /**
    * Specifies the logic to apply when booking the transaction fees. Should be combined with acquiringFees.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**.
    */
    'adyenFees'?: UpdateSplitConfigurationLogicRequest.AdyenFeesEnum;
    /**
    * Specifies the logic to apply when booking the transaction fees. Should be combined with schemeFee, adyenCommission & interchange.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**.
    */
    'adyenMarkup'?: UpdateSplitConfigurationLogicRequest.AdyenMarkupEnum;
    /**
    * Specifies the logic to apply when booking the chargeback amount.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**, **deductAccordingToSplitRatio**.
    */
    'chargeback'?: UpdateSplitConfigurationLogicRequest.ChargebackEnum;
    /**
    * Specifies the logic to apply when allocating the chargeback costs.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**
    */
    'chargebackCostAllocation'?: UpdateSplitConfigurationLogicRequest.ChargebackCostAllocationEnum;
    'commission': Commission;
    /**
    * Specifies the logic to apply when booking the transaction fees. Should be combined with schemeFee, adyenCommission & adyenMarkup.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**.
    */
    'interchange'?: UpdateSplitConfigurationLogicRequest.InterchangeEnum;
    /**
    * Specifies the logic to apply when booking the transaction fees. Cannot be combined with other fees.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**.
    */
    'paymentFee'?: UpdateSplitConfigurationLogicRequest.PaymentFeeEnum;
    /**
    * Specifies the logic to apply when booking the amount left over after currency conversion.  Possible values: **addToLiableAccount**, **addToOneBalanceAccount**.
    */
    'remainder'?: UpdateSplitConfigurationLogicRequest.RemainderEnum;
    /**
    * Specifies the logic to apply when booking the transaction fees. Should be combined with interchange, adyenCommission & adyenMarkup.  Possible values: **deductFromLiableAccount**, **deductFromOneBalanceAccount**.
    */
    'schemeFee'?: UpdateSplitConfigurationLogicRequest.SchemeFeeEnum;
    /**
    * Unique identifier of the split logic that is applied when the split configuration conditions are met.
    */
    'splitLogicId'?: string;
    /**
    * Specifies the logic to apply when booking the surcharge amount.  Possible values: **addToLiableAccount**, **addToOneBalanceAccount**
    */
    'surcharge'?: UpdateSplitConfigurationLogicRequest.SurchargeEnum;
    /**
    * Specifies the logic to apply when booking tips (gratuity).  Possible values: **addToLiableAccount**, **addToOneBalanceAccount**.
    */
    'tip'?: UpdateSplitConfigurationLogicRequest.TipEnum;
    static discriminator: string | undefined;
    static attributeTypeMap: Array<{
        name: string;
        baseName: string;
        type: string;
    }>;
    static getAttributeTypeMap(): {
        name: string;
        baseName: string;
        type: string;
    }[];
}
export declare namespace UpdateSplitConfigurationLogicRequest {
    enum AcquiringFeesEnum {
        DeductFromLiableAccount = "deductFromLiableAccount",
        DeductFromOneBalanceAccount = "deductFromOneBalanceAccount"
    }
    enum AdyenCommissionEnum {
        DeductFromLiableAccount = "deductFromLiableAccount",
        DeductFromOneBalanceAccount = "deductFromOneBalanceAccount"
    }
    enum AdyenFeesEnum {
        DeductFromLiableAccount = "deductFromLiableAccount",
        DeductFromOneBalanceAccount = "deductFromOneBalanceAccount"
    }
    enum AdyenMarkupEnum {
        DeductFromLiableAccount = "deductFromLiableAccount",
        DeductFromOneBalanceAccount = "deductFromOneBalanceAccount"
    }
    enum ChargebackEnum {
        DeductFromLiableAccount = "deductFromLiableAccount",
        DeductFromOneBalanceAccount = "deductFromOneBalanceAccount",
        DeductAccordingToSplitRatio = "deductAccordingToSplitRatio"
    }
    enum ChargebackCostAllocationEnum {
        DeductFromLiableAccount = "deductFromLiableAccount",
        DeductFromOneBalanceAccount = "deductFromOneBalanceAccount"
    }
    enum InterchangeEnum {
        DeductFromLiableAccount = "deductFromLiableAccount",
        DeductFromOneBalanceAccount = "deductFromOneBalanceAccount"
    }
    enum PaymentFeeEnum {
        DeductFromLiableAccount = "deductFromLiableAccount",
        DeductFromOneBalanceAccount = "deductFromOneBalanceAccount"
    }
    enum RemainderEnum {
        AddToLiableAccount = "addToLiableAccount",
        AddToOneBalanceAccount = "addToOneBalanceAccount"
    }
    enum SchemeFeeEnum {
        DeductFromLiableAccount = "deductFromLiableAccount",
        DeductFromOneBalanceAccount = "deductFromOneBalanceAccount"
    }
    enum SurchargeEnum {
        AddToLiableAccount = "addToLiableAccount",
        AddToOneBalanceAccount = "addToOneBalanceAccount"
    }
    enum TipEnum {
        AddToLiableAccount = "addToLiableAccount",
        AddToOneBalanceAccount = "addToOneBalanceAccount"
    }
}
