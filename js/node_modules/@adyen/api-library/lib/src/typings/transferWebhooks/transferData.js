"use strict";
/*
 * The version of the OpenAPI document: v4
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit this class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TransferData = void 0;
class TransferData {
    static getAttributeTypeMap() {
        return TransferData.attributeTypeMap;
    }
}
exports.TransferData = TransferData;
TransferData.discriminator = undefined;
TransferData.attributeTypeMap = [
    {
        "name": "accountHolder",
        "baseName": "accountHolder",
        "type": "ResourceReference"
    },
    {
        "name": "amount",
        "baseName": "amount",
        "type": "Amount"
    },
    {
        "name": "balanceAccount",
        "baseName": "balanceAccount",
        "type": "ResourceReference"
    },
    {
        "name": "balancePlatform",
        "baseName": "balancePlatform",
        "type": "string"
    },
    {
        "name": "balances",
        "baseName": "balances",
        "type": "Array<BalanceMutation>"
    },
    {
        "name": "category",
        "baseName": "category",
        "type": "TransferData.CategoryEnum"
    },
    {
        "name": "categoryData",
        "baseName": "categoryData",
        "type": "BankCategoryData | InternalCategoryData | IssuedCard | PlatformPayment"
    },
    {
        "name": "counterparty",
        "baseName": "counterparty",
        "type": "CounterpartyV3"
    },
    {
        "name": "creationDate",
        "baseName": "creationDate",
        "type": "Date"
    },
    {
        "name": "description",
        "baseName": "description",
        "type": "string"
    },
    {
        "name": "direction",
        "baseName": "direction",
        "type": "TransferData.DirectionEnum"
    },
    {
        "name": "events",
        "baseName": "events",
        "type": "Array<TransferEvent>"
    },
    {
        "name": "id",
        "baseName": "id",
        "type": "string"
    },
    {
        "name": "paymentInstrument",
        "baseName": "paymentInstrument",
        "type": "PaymentInstrument"
    },
    {
        "name": "reason",
        "baseName": "reason",
        "type": "TransferData.ReasonEnum"
    },
    {
        "name": "reference",
        "baseName": "reference",
        "type": "string"
    },
    {
        "name": "referenceForBeneficiary",
        "baseName": "referenceForBeneficiary",
        "type": "string"
    },
    {
        "name": "sequenceNumber",
        "baseName": "sequenceNumber",
        "type": "number"
    },
    {
        "name": "status",
        "baseName": "status",
        "type": "TransferData.StatusEnum"
    },
    {
        "name": "tracking",
        "baseName": "tracking",
        "type": "TransferNotificationTransferTracking"
    },
    {
        "name": "transactionRulesResult",
        "baseName": "transactionRulesResult",
        "type": "TransactionRulesResult"
    },
    {
        "name": "type",
        "baseName": "type",
        "type": "TransferData.TypeEnum"
    }
];
(function (TransferData) {
    let CategoryEnum;
    (function (CategoryEnum) {
        CategoryEnum["Bank"] = "bank";
        CategoryEnum["Internal"] = "internal";
        CategoryEnum["IssuedCard"] = "issuedCard";
        CategoryEnum["PlatformPayment"] = "platformPayment";
    })(CategoryEnum = TransferData.CategoryEnum || (TransferData.CategoryEnum = {}));
    let DirectionEnum;
    (function (DirectionEnum) {
        DirectionEnum["Incoming"] = "incoming";
        DirectionEnum["Outgoing"] = "outgoing";
    })(DirectionEnum = TransferData.DirectionEnum || (TransferData.DirectionEnum = {}));
    let ReasonEnum;
    (function (ReasonEnum) {
        ReasonEnum["AmountLimitExceeded"] = "amountLimitExceeded";
        ReasonEnum["Approved"] = "approved";
        ReasonEnum["BalanceAccountTemporarilyBlockedByTransactionRule"] = "balanceAccountTemporarilyBlockedByTransactionRule";
        ReasonEnum["CounterpartyAccountBlocked"] = "counterpartyAccountBlocked";
        ReasonEnum["CounterpartyAccountClosed"] = "counterpartyAccountClosed";
        ReasonEnum["CounterpartyAccountNotFound"] = "counterpartyAccountNotFound";
        ReasonEnum["CounterpartyAddressRequired"] = "counterpartyAddressRequired";
        ReasonEnum["CounterpartyBankTimedOut"] = "counterpartyBankTimedOut";
        ReasonEnum["CounterpartyBankUnavailable"] = "counterpartyBankUnavailable";
        ReasonEnum["DeclinedByTransactionRule"] = "declinedByTransactionRule";
        ReasonEnum["Error"] = "error";
        ReasonEnum["NotEnoughBalance"] = "notEnoughBalance";
        ReasonEnum["RefusedByCounterpartyBank"] = "refusedByCounterpartyBank";
        ReasonEnum["RouteNotFound"] = "routeNotFound";
        ReasonEnum["ScaFailed"] = "scaFailed";
        ReasonEnum["Unknown"] = "unknown";
    })(ReasonEnum = TransferData.ReasonEnum || (TransferData.ReasonEnum = {}));
    let StatusEnum;
    (function (StatusEnum) {
        StatusEnum["ApprovalPending"] = "approvalPending";
        StatusEnum["AtmWithdrawal"] = "atmWithdrawal";
        StatusEnum["AtmWithdrawalReversalPending"] = "atmWithdrawalReversalPending";
        StatusEnum["AtmWithdrawalReversed"] = "atmWithdrawalReversed";
        StatusEnum["AuthAdjustmentAuthorised"] = "authAdjustmentAuthorised";
        StatusEnum["AuthAdjustmentError"] = "authAdjustmentError";
        StatusEnum["AuthAdjustmentRefused"] = "authAdjustmentRefused";
        StatusEnum["Authorised"] = "authorised";
        StatusEnum["BankTransfer"] = "bankTransfer";
        StatusEnum["BankTransferPending"] = "bankTransferPending";
        StatusEnum["Booked"] = "booked";
        StatusEnum["BookingPending"] = "bookingPending";
        StatusEnum["Cancelled"] = "cancelled";
        StatusEnum["CapturePending"] = "capturePending";
        StatusEnum["CaptureReversalPending"] = "captureReversalPending";
        StatusEnum["CaptureReversed"] = "captureReversed";
        StatusEnum["Captured"] = "captured";
        StatusEnum["CapturedExternally"] = "capturedExternally";
        StatusEnum["Chargeback"] = "chargeback";
        StatusEnum["ChargebackExternally"] = "chargebackExternally";
        StatusEnum["ChargebackPending"] = "chargebackPending";
        StatusEnum["ChargebackReversalPending"] = "chargebackReversalPending";
        StatusEnum["ChargebackReversed"] = "chargebackReversed";
        StatusEnum["Credited"] = "credited";
        StatusEnum["DepositCorrection"] = "depositCorrection";
        StatusEnum["DepositCorrectionPending"] = "depositCorrectionPending";
        StatusEnum["Dispute"] = "dispute";
        StatusEnum["DisputeClosed"] = "disputeClosed";
        StatusEnum["DisputeExpired"] = "disputeExpired";
        StatusEnum["DisputeNeedsReview"] = "disputeNeedsReview";
        StatusEnum["Error"] = "error";
        StatusEnum["Expired"] = "expired";
        StatusEnum["Failed"] = "failed";
        StatusEnum["Fee"] = "fee";
        StatusEnum["FeePending"] = "feePending";
        StatusEnum["InternalTransfer"] = "internalTransfer";
        StatusEnum["InternalTransferPending"] = "internalTransferPending";
        StatusEnum["InvoiceDeduction"] = "invoiceDeduction";
        StatusEnum["InvoiceDeductionPending"] = "invoiceDeductionPending";
        StatusEnum["ManualCorrectionPending"] = "manualCorrectionPending";
        StatusEnum["ManuallyCorrected"] = "manuallyCorrected";
        StatusEnum["MatchedStatement"] = "matchedStatement";
        StatusEnum["MatchedStatementPending"] = "matchedStatementPending";
        StatusEnum["MerchantPayin"] = "merchantPayin";
        StatusEnum["MerchantPayinPending"] = "merchantPayinPending";
        StatusEnum["MerchantPayinReversed"] = "merchantPayinReversed";
        StatusEnum["MerchantPayinReversedPending"] = "merchantPayinReversedPending";
        StatusEnum["MiscCost"] = "miscCost";
        StatusEnum["MiscCostPending"] = "miscCostPending";
        StatusEnum["PaymentCost"] = "paymentCost";
        StatusEnum["PaymentCostPending"] = "paymentCostPending";
        StatusEnum["Received"] = "received";
        StatusEnum["RefundPending"] = "refundPending";
        StatusEnum["RefundReversalPending"] = "refundReversalPending";
        StatusEnum["RefundReversed"] = "refundReversed";
        StatusEnum["Refunded"] = "refunded";
        StatusEnum["RefundedExternally"] = "refundedExternally";
        StatusEnum["Refused"] = "refused";
        StatusEnum["ReserveAdjustment"] = "reserveAdjustment";
        StatusEnum["ReserveAdjustmentPending"] = "reserveAdjustmentPending";
        StatusEnum["Returned"] = "returned";
        StatusEnum["SecondChargeback"] = "secondChargeback";
        StatusEnum["SecondChargebackPending"] = "secondChargebackPending";
        StatusEnum["Undefined"] = "undefined";
    })(StatusEnum = TransferData.StatusEnum || (TransferData.StatusEnum = {}));
    let TypeEnum;
    (function (TypeEnum) {
        TypeEnum["AtmWithdrawal"] = "atmWithdrawal";
        TypeEnum["AtmWithdrawalReversal"] = "atmWithdrawalReversal";
        TypeEnum["BalanceAdjustment"] = "balanceAdjustment";
        TypeEnum["BalanceMigration"] = "balanceMigration";
        TypeEnum["BalanceRollover"] = "balanceRollover";
        TypeEnum["BankTransfer"] = "bankTransfer";
        TypeEnum["Capture"] = "capture";
        TypeEnum["CaptureReversal"] = "captureReversal";
        TypeEnum["CardTransfer"] = "cardTransfer";
        TypeEnum["CashOutFee"] = "cashOutFee";
        TypeEnum["CashOutFunding"] = "cashOutFunding";
        TypeEnum["CashOutInstruction"] = "cashOutInstruction";
        TypeEnum["Chargeback"] = "chargeback";
        TypeEnum["ChargebackCorrection"] = "chargebackCorrection";
        TypeEnum["ChargebackReversal"] = "chargebackReversal";
        TypeEnum["ChargebackReversalCorrection"] = "chargebackReversalCorrection";
        TypeEnum["DepositCorrection"] = "depositCorrection";
        TypeEnum["Fee"] = "fee";
        TypeEnum["Grant"] = "grant";
        TypeEnum["Installment"] = "installment";
        TypeEnum["InstallmentReversal"] = "installmentReversal";
        TypeEnum["InternalTransfer"] = "internalTransfer";
        TypeEnum["InvoiceDeduction"] = "invoiceDeduction";
        TypeEnum["Leftover"] = "leftover";
        TypeEnum["ManualCorrection"] = "manualCorrection";
        TypeEnum["MiscCost"] = "miscCost";
        TypeEnum["Payment"] = "payment";
        TypeEnum["PaymentCost"] = "paymentCost";
        TypeEnum["Refund"] = "refund";
        TypeEnum["RefundReversal"] = "refundReversal";
        TypeEnum["Repayment"] = "repayment";
        TypeEnum["ReserveAdjustment"] = "reserveAdjustment";
        TypeEnum["SecondChargeback"] = "secondChargeback";
        TypeEnum["SecondChargebackCorrection"] = "secondChargebackCorrection";
    })(TypeEnum = TransferData.TypeEnum || (TransferData.TypeEnum = {}));
})(TransferData = exports.TransferData || (exports.TransferData = {}));
//# sourceMappingURL=transferData.js.map