"use strict";
/*
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit this class manually.
 */
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AndroidFilesCompanyLevelApi = void 0;
const getJsonResponse_1 = __importDefault(require("../../helpers/getJsonResponse"));
const service_1 = __importDefault(require("../../service"));
const resource_1 = __importDefault(require("../resource"));
const models_1 = require("../../typings/management/models");
class AndroidFilesCompanyLevelApi extends service_1.default {
    constructor(client) {
        super(client);
        this.API_BASEPATH = "https://management-test.adyen.com/v1";
        this.baseUrl = this.createBaseUrl(this.API_BASEPATH);
    }
    /**
    * @summary Get a list of Android apps
    * @param companyId {@link string } The unique identifier of the company account.
    * @param pageNumber {@link number } The number of the page to fetch.
    * @param pageSize {@link number } The number of items to have on a page, maximum 100. The default is 20 items on a page.
    * @param packageName {@link string } The package name that uniquely identifies the Android app.
    * @param versionCode {@link number } The version number of the app.
    * @param requestOptions {@link IRequest.Options}
    * @return {@link AndroidAppsResponse }
    */
    async listAndroidApps(companyId, requestOptions) {
        const endpoint = `${this.baseUrl}/companies/{companyId}/androidApps`
            .replace("{" + "companyId" + "}", encodeURIComponent(String(companyId)));
        const resource = new resource_1.default(this, endpoint);
        const response = await (0, getJsonResponse_1.default)(resource, "", { ...requestOptions, method: "GET" });
        return models_1.ObjectSerializer.deserialize(response, "AndroidAppsResponse");
    }
    /**
    * @summary Get Android app
    * @param companyId {@link string } The unique identifier of the company account.
    * @param id {@link string } The unique identifier of the app.
    * @param requestOptions {@link IRequest.Options}
    * @return {@link AndroidApp }
    */
    async getAndroidApp(companyId, id, requestOptions) {
        const endpoint = `${this.baseUrl}/companies/{companyId}/androidApps/{id}`
            .replace("{" + "companyId" + "}", encodeURIComponent(String(companyId)))
            .replace("{" + "id" + "}", encodeURIComponent(String(id)));
        const resource = new resource_1.default(this, endpoint);
        const response = await (0, getJsonResponse_1.default)(resource, "", { ...requestOptions, method: "GET" });
        return models_1.ObjectSerializer.deserialize(response, "AndroidApp");
    }
    /**
    * @summary Get a list of Android certificates
    * @param companyId {@link string } The unique identifier of the company account.
    * @param pageNumber {@link number } The number of the page to fetch.
    * @param pageSize {@link number } The number of items to have on a page, maximum 100. The default is 20 items on a page.
    * @param certificateName {@link string } The name of the certificate.
    * @param requestOptions {@link IRequest.Options}
    * @return {@link AndroidCertificatesResponse }
    */
    async listAndroidCertificates(companyId, requestOptions) {
        const endpoint = `${this.baseUrl}/companies/{companyId}/androidCertificates`
            .replace("{" + "companyId" + "}", encodeURIComponent(String(companyId)));
        const resource = new resource_1.default(this, endpoint);
        const response = await (0, getJsonResponse_1.default)(resource, "", { ...requestOptions, method: "GET" });
        return models_1.ObjectSerializer.deserialize(response, "AndroidCertificatesResponse");
    }
}
exports.AndroidFilesCompanyLevelApi = AndroidFilesCompanyLevelApi;
//# sourceMappingURL=androidFilesCompanyLevelApi.js.map