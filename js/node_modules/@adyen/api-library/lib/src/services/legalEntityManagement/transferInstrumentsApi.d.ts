import Service from "../../service";
import Client from "../../client";
import { TransferInstrument } from "../../typings/legalEntityManagement/models";
import { TransferInstrumentInfo } from "../../typings/legalEntityManagement/models";
import { IRequest } from "../../typings/requestOptions";
export declare class TransferInstrumentsApi extends Service {
    private readonly API_BASEPATH;
    private baseUrl;
    constructor(client: Client);
    /**
    * @summary Delete a transfer instrument
    * @param id {@link string } The unique identifier of the transfer instrument to be deleted.
    * @param requestOptions {@link IRequest.Options}
    */
    deleteTransferInstrument(id: string, requestOptions?: IRequest.Options): Promise<void>;
    /**
    * @summary Get a transfer instrument
    * @param id {@link string } The unique identifier of the transfer instrument.
    * @param requestOptions {@link IRequest.Options}
    * @return {@link TransferInstrument }
    */
    getTransferInstrument(id: string, requestOptions?: IRequest.Options): Promise<TransferInstrument>;
    /**
    * @summary Update a transfer instrument
    * @param id {@link string } The unique identifier of the transfer instrument.
    * @param xRequestedVerificationCode {@link string } Use the requested verification code 0_0001 to resolve any suberrors associated with the transfer instrument. Requested verification codes can only be used in your test environment.
    * @param transferInstrumentInfo {@link TransferInstrumentInfo }
    * @param requestOptions {@link IRequest.Options}
    * @return {@link TransferInstrument }
    */
    updateTransferInstrument(id: string, transferInstrumentInfo: TransferInstrumentInfo, requestOptions?: IRequest.Options): Promise<TransferInstrument>;
    /**
    * @summary Create a transfer instrument
    * @param xRequestedVerificationCode {@link string } Use a suberror code as your requested verification code. You can include one code at a time in your request header. Requested verification codes can only be used in your test environment.
    * @param transferInstrumentInfo {@link TransferInstrumentInfo }
    * @param requestOptions {@link IRequest.Options}
    * @return {@link TransferInstrument }
    */
    createTransferInstrument(transferInstrumentInfo: TransferInstrumentInfo, requestOptions?: IRequest.Options): Promise<TransferInstrument>;
}
