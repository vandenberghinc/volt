/*
 * Author: Daan van den Bergh
 * Copyright: Â© 2022 - 2023 Daan van den Bergh.
 */

// ---------------------------------------------------------
// Libraries.

const https = require("https");
const http = require("http");
const libcrypto = require("crypto");
const libnodemailer = require('nodemailer');
const libcluster = require('cluster');
const libos = require('os');

// ---------------------------------------------------------
// Imports.

const {vlib, vhighlight} = require("./vinc.js");
const utils = require("./utils.js");
const Meta = require('./meta.js');
const Mail = require('./plugins/mail.js');
const Status = require("./status.js");
const Mutex = require("./mutex.js");
const Endpoint = require("./endpoint.js");
const Response = require("./response.js");
const Request = require("./request.js");
const Database = require("./database.js");
const FileWatcher = require("./file_watcher.js");
const Users = require("./users.js");
const Adyen = require("./payments/adyen.js");
const Paddle = require("./payments/paddle.js");
const {FrontendError} = utils;

// ---------------------------------------------------------
// The server object.
// @todo redirect to https on http also important for seo.
// @todo convert throw new Error to frontend errors.
// @todo figure out with what settings nodejs should be started for heavy servers, for example larger memory size `--max-old-space-size`
// @todo implement usage of multiple cpu's using lib `cluster`.
// @todo when rendering pages the user could use a special OptimizeText() function which will be optimized for copy writing and seo when adding loading static files. Quite hard but would be sublime (writesonic is a good platform).

/*  @docs:
    @nav: Backend
    @title: Server
    @description: 
        The backend server class.
        When the https parameters `certificate` and `private_key` are defined, the server will run automatically on http and https.
    @parameter:
        @name: production
        @description: Whether the server is in production more, or in development mode.
        @type: boolean
        @required: true
    @parameter:
        @name: ip
        @description: The ip where the server will run on.
        @type: string
        @required: true
    @parameter:
        @name: port
        @description: The port where the server will run on. Leave the port `null` to run on port `80` for http and on port `443` for https.
        @type: number
    @parameter:
        @name: tls
        @description: The tls settings to enable HTTPS.
        @type: object
        @required: false
        @attribute:
            @name: certificate
            @description: The path to the certificate.
            @type: string
        @attribute:
            @name: private_key
            @description: The path to the private key file.
            @type: string
        @attribute:
            @name: passphrase
            @description: The passphrase of the private key.
            @type: string
    @parameter:
        @name: domain
        @description: The full domain url without `http://` or `https://`.
        @type: string
        @required: true
    @parameter:
        @name: statics
        @description: Array with path's to static directories.
        @type: array[string]
        @required: true
    @parameter:
        @name: database
        @description:
            The mongodb database settings.

            The parameter can be defined as a `string` type as the database uri, or as an object with parameters for the <type>Database</type> object.
        @type: string, object
        @required: true
    @parameter:
        @name: default_headers
        @description: Used to override the default headers generated by vweb. Leave parameter `default_headers` as `null` to let vweb automatically generate the default headers.
        @type: object
    @parameter:
        @name: favicon
        @description: The path to the favicon.
        @type: string
    @parameter:
        @name: token_expiration
        @description: The token a sign in token will be valid in seconds.
        @type: number
    @parameter:
        @name: enable_2fa
        @description: Enable 2fa for user authentication.
        @type: boolean
        @required: true
    @parameter:
        @name: enable_account_activation
        @description: Enable account activation by email after a user signs up.
        @type: boolean
        @required: true
    @parameter:
        @name: meta
        @description: The default meta object.
        @type: object, vweb.Meta
    @parameter:
        @name: company
        @type: object
        @description: Your company information.
        @attribute:
            @name: name
            @type: string
            @required: true
            @description: The name of your company.
        @attribute:
            @name: legal_name
            @type: string
            @required: true
            @description: The legal name of your company.
        @attribute:
            @name: street
            @type: string
            @required: true
            @description: The street name of your company's address.
        @attribute:
            @name: house_number
            @type: string
            @required: true
            @description: The house number or house name of your company's address.
        @attribute:
            @name: postal_code
            @type: string
            @required: true
            @description: The postal code or zip code of your company's address.
        @attribute:
            @name: city
            @type: string
            @required: true
            @description: The city of your company's address.
        @attribute:
            @name: province
            @type: string
            @required: true
            @description: The province or state of your company's address.
        @attribute:
            @name: country
            @type: string
            @required: true
            @description: The country name of your company's address.
        @attribute:
            @name: tax_id
            @type: string
            @required: true
            @description: The tax id of your company.
        @attribute:
            @name: type
            @type: string
            @description: The type of company.
        @attribute:
            @name: icon
            @type: string
            @required: true
            @description: The endpoint url path of your company's icon, png format. This must be an endpoint url since access to the file path is also required for creating invoices.
        @attribute:
            @name: stroke_icon
            @type: string
            @required: true
            @description: The endpoint url path of your company's stroke icon, png format. In payment invoices the stroke icon precedes the default icon. This must be an endpoint url since access to the file path is also required for creating invoices.
    @parameter:
        @name: smtp
        @description:
            The smpt arguments object.
            More information about the arguments can be found at the nodemailer <link https://nodemailer.com/smtp/>documentation<link>.
        @type: object
        @attribute:
            @name: sender
            @description:
                The smtp sender address may either be a string with the email address, e.g. `your@email.com`.
                Or an array with the sender name and email address, e.g. `["Sender", "your@email.com"]`.
            @type: string, array
        @attribute:
            @name: host
            @description: The mail server's host address.
            @type: string
        @attribute:
            @name: port
            @description: The mail server's port.
            @type: number
        @attribute:
            @name: secure
            @description: Enable secure options.
            @type: boolean
        @parameter:
            @name: auth
            @description: The authentication settings.
            @type: object
            @attribute:
                @name: user
                @description: The email used for authentication.
                @type: string
            @attribute:
                @name: pass
                @description: The password used for authentication.
                @type: string
    @parameter:
        @name: payments
        @type: object
        @description: The arguments for the payment class. The `type` attribute is used to indicate the payment provider, the other attributes are arguments for the payment class.
        @attribute:
            @name: type
            @type: string
            @description: The payment provider name.
            @required: true
            @enum:
                @value: adyen
                @desc: Payment provider Adyen.
            @enum:
                @value: paddle
                @desc: Payment provider Paddle.
    @parameter:
        @name: google_tag
        @description: The google tag id.
        @type: string
    @parameter:
        @name: file_watcher
        @description: The file watcher arguments, define to enable file watching. The parameter may either be an FileWatcher object, an object with arguments or a string for the `source` argument. The process argument `--no-file-watcher` can always be used to temporarily disable the file watcher.
        @type: FileWatcher, object, string
    @parameter:
        @name: mail_style
        @description: The mail settings to customize automatically generated mails.
        @type: object
        @attribute:
            @name: font
            @description: The font family.
            @type: string
        @attribute:
            @name: button_bg
            @description: The background color of the button's in your mails.
            @type: string
    @parameter:
        @name: offline
        @description: Boolean indicating if the development server is being run offline.
        @type: boolean

    @attribute:
        @name: users
        @type: object
        @attribute:
            @name: public
            @type: UIDCollection
            @desc: 
                The database collection for public data of users.
                
                More information about the collection's functions can be found at <type>UIDCollection</type>
            @warning: 
                The authenticated user always has read and write access to all data inside the user's protected directory through the backend rest api. Any other users or unauthenticated users do not have access to this data.
        @attribute:
            @name: protected
            @type: UIDCollection
            @desc: 
                The database collection for public data of users.
                
                More information about the collection's functions can be found at <type>UIDCollection</type>
            @warning:
                The authenticated user always has read access to all data inside the user's protected directory through the backend rest api. Any other users or unauthenticated users do not have access to this data.
        @attribute:
            @name: private
            @type: UIDCollection
            @desc: 
                The database collection for public data of users.
                
                More information about the collection's functions can be found at <type>UIDCollection</type>
            @note:
                The user has no read or write access to the private directory.
    @attribute:
        @name: storage
        @type: Collection
        @desc: 
            The database storage collection for the website's system backend data.
            
            More information about the collection's functions can be found at <type>Collection</type>
 */

// @tdo implement 3D secure "requires_action" status for a refund and payment intent.
// https://stripe.com/docs/payments/3d-secure

class Server {

    // Mimes for content type detection.
    // Must be defined before creating static endpoints.
    static content_type_mimes = [
        [".html", "text/html"],
        [".htm", "text/html"],
        [".shtml", "text/html"],
        [".css", "text/css"],
        [".xml", "application/xml"],
        [".gif", "image/gif"],
        [".jpeg", "image/jpeg"],
        [".jpg", "image/jpeg"],
        [".js", "application/javascript"],
        [".atom", "application/atom+xml"],
        [".rss", "application/rss+xml"],
        [".mml", "text/mathml"],
        [".txt", "text/plain"],
        [".jad", "text/vnd.sun.j2me.app-descriptor"],
        [".wml", "text/vnd.wap.wml"],
        [".htc", "text/x-component"],
        [".png", "image/png"],
        [".tif", "image/tiff"],
        [".tiff", "image/tiff"],
        [".wbmp", "image/vnd.wap.wbmp"],
        [".ico", "image/x-icon"],
        [".jng", "image/x-jng"],
        [".bmp", "image/x-ms-bmp"],
        [".svg", "image/svg+xml"],
        [".svgz", "image/svg+xml"],
        [".webp", "image/webp"],
        [".woff", "font/woff"],
        [".woff2", "font/woff2"],
        [".jar", "application/java-archive"],
        [".war", "application/java-archive"],
        [".ear", "application/java-archive"],
        [".json", "application/json"],
        [".hqx", "application/mac-binhex40"],
        [".doc", "application/msword"],
        [".pdf", "application/pdf"],
        [".ps", "application/postscript"],
        [".eps", "application/postscript"],
        [".ai", "application/postscript"],
        [".rtf", "application/rtf"],
        [".m3u8", "application/vnd.apple.mpegurl"],
        [".xls", "application/vnd.ms-excel"],
        [".eot", "application/vnd.ms-fontobject"],
        [".ppt", "application/vnd.ms-powerpoint"],
        [".wmlc", "application/vnd.wap.wmlc"],
        [".kml", "application/vnd.google-earth.kml+xml"],
        [".kmz", "application/vnd.google-earth.kmz"],
        [".7z", "application/x-7z-compressed"],
        [".cco", "application/x-cocoa"],
        [".jardiff", "application/x-java-archive-diff"],
        [".jnlp", "application/x-java-jnlp-file"],
        [".run", "application/x-makeself"],
        [".pl", "application/x-perl"],
        [".pm", "application/x-perl"],
        [".prc", "application/x-pilot"],
        [".pdb", "application/x-pilot"],
        [".rar", "application/x-rar-compressed"],
        [".rpm", "application/x-redhat-package-manager"],
        [".sea", "application/x-sea"],
        [".swf", "application/x-shockwave-flash"],
        [".sit", "application/x-stuffit"],
        [".tcl", "application/x-tcl"],
        [".tk", "application/x-tcl"],
        [".der", "application/x-x509-ca-cert"],
        [".pem", "application/x-x509-ca-cert"],
        [".crt", "application/x-x509-ca-cert"],
        [".xpi", "application/x-xpinstall"],
        [".xhtml", "application/xhtml+xml"],
        [".xspf", "application/xspf+xml"],
        [".zip", "application/zip"],
        [".bin", "application/octet-stream"],
        [".exe", "application/octet-stream"],
        [".dll", "application/octet-stream"],
        [".deb", "application/octet-stream"],
        [".dmg", "application/octet-stream"],
        [".iso", "application/octet-stream"],
        [".img", "application/octet-stream"],
        [".msi", "application/octet-stream"],
        [".msp", "application/octet-stream"],
        [".msm", "application/octet-stream"],
        [".docx", "application/vnd.openxmlformats-officedocument.wordprocessingml.document"],
        [".xlsx", "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"],
        [".pptx", "application/vnd.openxmlformats-officedocument.presentationml.presentation"],
        [".mid", "audio/midi"],
        [".midi", "audio/midi"],
        [".kar", "audio/midi"],
        [".mp3", "audio/mpeg"],
        [".ogg", "audio/ogg"],
        [".m4a", "audio/x-m4a"],
        [".ra", "audio/x-realaudio"],
        [".3gpp", "video/3gpp"],
        [".3gp", "video/3gpp"],
        [".ts", "video/mp2t"],
        [".mp4", "video/mp4"],
        [".mpeg", "video/mpeg"],
        [".mpg", "video/mpeg"],
        [".mov", "video/quicktime"],
        [".webm", "video/webm"],
        [".flv", "video/x-flv"],
        [".m4v", "video/x-m4v"],
        [".mng", "video/x-mng"],
        [".asx", "video/x-ms-asf"],
        [".asf", "video/x-ms-asf"],
        [".wmv", "video/x-ms-wmv"],
        [".avi", "video/x-msvideo"],
    ]
    static compressed_extensions = [
        ".png",
        ".jpg",
        ".jpeg",
        ".gif",
        ".webp",
        ".bmp",
        ".tiff",
        ".ico",
        ".svg",
        ".svgz",
        ".mng",
        ".apng",
        ".jfif",
        ".jp2",
        ".jpx",
        ".j2k",
        ".jpm",
        ".jpf",
        ".heif",
        ".mp3",
        ".ogg",
        ".wav",
        ".flac",
        ".m4a",
        ".aac",
        ".wma",
        ".ra",
        ".mid",
        ".mp4",
        ".webm",
        ".mkv",
        ".mov",
        ".avi",
        ".wmv",
        ".mpg",
        ".mpeg",
        ".flv",
    ];

    // Constructor.
    constructor({
        ip = "127.0.0.1",
        port = 8000,
        domain = null,
        statics = [],
        database = "mongodb://localhost:27017/main",
        favicon = null,
        company = null,
        meta = new Meta(),
        tls = null,
        smtp = null,
        mail_style = {
            font: '"Helvetica", sans-serif',
            title_fg: "#121B23",
            subtitle_fg: "#121B23",
            text_fg: "#1F2F3D",
            button_fg: "#FFFFFF",
            footer_fg: "#686B80",
            bg: "#EEEEEE",
            widget_bg: "#FFFFFF",
            widget_border: "#E6E6E6",
            button_bg: "#1F2F3D",
            divider_bg: "#706780",
        },
        payments = null,
        default_headers = null,
        google_tag = null,
        token_expiration = 86400,
        enable_2fa = false,
        enable_account_activation = true,
        production = false,
        file_watcher = null,
        offline = false,
    }) {

        // Verify args.
        vlib.utils.verify_params({params: arguments[0], check_unknown: true, info: {
            ip: "string",
            port: "number",
            domain: "string",
            statics: "array",
            database: {type: ["string", "object"]},
            favicon: {type: "string", required: false},
            company: {
                type: "object",
                attrs: {
                    name: "string",
                    legal_name: "string",
                    street: "string",
                    house_number: "string",
                    postal_code: "string",
                    city: "string",
                    province: "string",
                    country: "string",
                    tax_id: {type: "string", default: null},
                    icon: {type: "string", default: null},
                    stroke_icon: {type: "string", default: null},
                }
            },
            meta: {type: "object", required: false},
            tls: {
                type: ["null", "object"],
                required: false,
                attrs: {
                    certificate: "string",
                    private_key: "string",
                    passphrase: {type: "string", default: null},
                }
            },
            smtp: {type: ["null", "object"], required: false},
            mail_style: {
                type: "object",
                attrs: {
                    font: {type: "string", default: '"Helvetica", sans-serif'},
                    title_fg: {type: "string", default: "#121B23"},
                    subtitle_fg: {type: "string", default: "#121B23"},
                    text_fg: {type: "string", default: "#1F2F3D"},
                    button_fg: {type: "string", default: "#FFFFFF"},
                    footer_fg: {type: "string", default: "#686B80"},
                    bg: {type: "string", default: "#EEEEEE"},
                    widget_bg: {type: "string", default: "#FFFFFF"},
                    button_bg: {type: "string", default: "#421959"},
                    widget_border: {type: "string", default: "#E6E6E6"},
                    divider_bg: {type: "string", default: "#E6E6E6"},
                }
            },
            payments: {type: ["null", "object"], required: false},
            default_headers: {type: ["null", "object"], required: false},
            google_tag: {type: "string", required: false},
            token_expiration: {type: "number", required: false},
            enable_2fa: {type: "boolean", required: false},
            enable_account_activation: {type: "boolean", required: false},
            production: {type: "boolean", required: false},
            file_watcher: {type: ["null", "string", "object"], required: false},
            offline: {type: "boolean", default: false}
        }});

        // Assign attributes directly.
        this.port = port;
        this.ip = ip;
        this.favicon = favicon;
        this.enable_2fa = enable_2fa;
        this.enable_account_activation = enable_account_activation;
        this.token_expiration = token_expiration;
        this.google_tag = google_tag;
        this.production = production;
        this.company = company;
        this.mail_style = mail_style;
        this.offline = offline;

        // Set domain.
        this.domain = domain.replace("https://","").replace("http://","");
        while (this.domain.length > 0 && this.domain.charAt(this.domain.length - 1) === "/") {
            this.domain = this.domain.substr(0, this.domain.length - 1)
        }

        // Set full domain.
        this.full_domain = `http${tls == null || tls.private_key === null ? "" : "s"}://${domain}`; // also required for Stripe.
        while (this.full_domain.charAt(this.full_domain.length - 1) === "/") {
            this.full_domain = this.full_domain.substr(0, this.full_domain.length - 1);
        }

        // Set statics.
        this.statics = [];
        let export_static;
        statics.iterate((path) => {
            path = new vlib.Path(path).abs();
            if (export_static === undefined && path.name() === "static") {
                export_static = path;
            }
            if (this.statics.includes(path) === false) {
                this.statics.push(path);
            }
        });
        if (export_static === undefined) {
            throw Error("The static directories must at least include one directory named \"static\".");
        }

        // Set meta.
        if (meta instanceof Meta === false) {
            meta = new Meta(meta);
        }
        if (favicon != null && meta.favicon == null) {
            meta.favicon = this.full_domain + "/favicon.ico";
        }
        if (favicon != null && meta.image == null) {
            meta.favicon = this.full_domain + "/favicon.ico";
        }
        this.meta = meta;

        // Default headers.
        if (default_headers === null) {
            this.csp = {
                "default-src": "'self' https://*.google-analytics.com",
                "img-src": `'self' http://${this.domain} https://${this.domain} https://*.google-analytics.com https://raw.githubusercontent.com/vandenberghinc/ `,
                "script-src": "'self' 'unsafe-inline' https://ajax.googleapis.com https://www.googletagmanager.com https://googletagmanager.com https://*.google-analytics.com https://code.jquery.com https://cdn.jsdelivr.net/npm/@vandenberghinc/",
                "style-src": "'self' 'unsafe-inline' https://cdn.jsdelivr.net/npm/@vandenberghinc/",
            }
            this.default_headers = {
                "Vary": "Origin",
                "Referrer-Policy": "same-origin",
                "Access-Control-Allow-Methods": "GET, POST, PUT, PATCH, DELETE, OPTIONS",
                "X-XSS-Protection": "1; mode=block",
                "X-Content-Type-Options": "frame-ancestors 'none'; nosniff;",
                "X-Frame-Options": "DENY",
                "Strict-Transport-Security": "max-age=31536000",
            }
        } else {
            if (default_headers["Content-Security-Policy"] != null && typeof default_headers["Content-Security-Policy"] !== "object") {
                throw Error("The Content-Security-Policy of the default headers must be an object with values for each csp key, e.g. \"{'script-src': '...'}\".");
            }
            this.csp = default_headers["Content-Security-Policy"] != null ? default_headers["Content-Security-Policy"] : {
                "default-src": "'self' https://*.google-analytics.com",
                "img-src": `'self' http://${this.domain} https://${this.domain} https://*.google-analytics.com https://raw.githubusercontent.com/vandenberghinc/ `,
                "script-src": "'self' 'unsafe-inline' https://ajax.googleapis.com https://www.googletagmanager.com https://googletagmanager.com https://*.google-analytics.com https://code.jquery.com https://cdn.jsdelivr.net/npm/@vandenberghinc/",
                "style-src": "'self' 'unsafe-inline' https://cdn.jsdelivr.net/npm/@vandenberghinc/",
            }
            this.default_headers = default_headers;
        }

        // Initialize payments.
        if (payments) {
            if (payments.type === "adyen") {
                this.payments = new Adyen({
                    _server: this,
                    ...payments,
                })
            } else if (payments.type === "paddle") {
                this.payments = new Paddle({
                    _server: this,
                    ...payments,
                })
            } else {
                throw Error(`Invalid payment processor type "${payments.type}", valid types are "paddle" or "adyen".`)
            }
        }

        // Define your list of endpoints
        this.endpoints = [];

        // Copy the default static directory.
        // Must be before the file watcher is initialized.
        const sync_dir = async (from, to) => {
            if (to.exists() === false) {
                from.cp_sync(to);
                return ;
            }
            const paths = from.paths_sync().iterate_append((item) => {
                return item.str().substr(from.length);
            });
            paths.iterate_async_await((subpath) => {
                const src = from.join(subpath)
                const dest = to.join(subpath);
                if (dest.exists() === false || src.mtime > dest.mtime) {
                    src.cp_sync(dest)
                }
            })
        }
        const src_static = new vlib.Path(`${__dirname}/../static/`).abs();
        sync_dir(src_static.join("payments"), export_static.join("payments"));

        // File watcher.
        if (process.argv.includes("--no-file-watcher") === false && this.production === false && file_watcher != null && process.env.VWEB_FILE_WATCHER != '1') {

            // Create default endpoints.
            let additional_paths = this._create_default_endpoints();

            // Create static endpoints.
            this.statics.iterate((path) => {
                additional_paths = additional_paths.concat(this._create_static_endpoints(path.base(), path));
            });

            // Add the vweb backend source files to the additional files.
            additional_paths.push(__dirname);

            // Initialize file watcher.
            if (typeof file_watcher === "string" || file_watcher instanceof vlib.Path) {
                this.file_watcher = new FileWatcher({source: file_watcher});
            }
            else if (file_watcher instanceof FileWatcher) {
                this.file_watcher = file_watcher;
            } else {
                this.file_watcher = new FileWatcher(file_watcher);
            }
            // this.file_watcher.excluded.push(this.database.str());

            // Add default and static endpoints.
            this.file_watcher.additional_paths = this.file_watcher.additional_paths.concat(additional_paths);
            
            // Start.
            this.file_watcher.start();
            return ;
        }

        // Initialize the database class.
        if (typeof database === "string" || database instanceof String) {
            this.db = new Database({uri: database, _server: this});
        } else {
            this.db = new Database({...database, _server: this});
        }

        // Initialize the users class.
        this.users = new Users(this);

        // The smtp instance.
        if (smtp) {
            this.smtp_sender = smtp.sender;
            this.smtp = libnodemailer.createTransport(smtp);
        }
        
        // Create an HTTPS server
        if (tls) {
            this.https = https.createServer(
                {
                    key: new vlib.Path(tls.private_key).load_sync('utf8'), 
                    cert: new vlib.Path(tls.certificate).load_sync('utf8'), 
                    passphrase: tls.passphrase
                },
                (request, response) => this._serve(request, response)
            );
        }

        // Create an HTTP server
        this.http = http.createServer((request, response) => this._serve(request, response));

        // The master sha256 hash key.
        this.hash_key = null;
    }

    // ---------------------------------------------------------
    // Utils (private).

    // Get a content type from an extension.
    _get_content_type(extension) {
        let content_type = Server.content_type_mimes.iterate((item) => {
            if (item[0] == extension) {
                return item[1];
            }
        })
        if (content_type == null) {
            content_type = "application/octet-stream";
        }
        return content_type;
    }

    // ---------------------------------------------------------
    // Crypto (private).

    // Generate a crypto key.
    _generate_crypto_key(length = 32) {
        return libcrypto.randomBytes(length).toString('hex');
    }

    // Create a sha hmac with the master key.
    _hmac(data) {
        const hmac = libcrypto.createHmac("sha256", this.hash_key);
        hmac.update(data);
        return hmac.digest("hex");
    }

    // ---------------------------------------------------------
    // Headers (private).

    // Initialize the default headers.
    _init_default_headers() {
        let csp = "";
        Object.keys(this.csp).iterate((key) => {
            csp += key;
            const value = this.csp[key];
            if (typeof value === "string" && value.length > 0) {
                csp += " ";
                csp += value;
            }
            csp += ";";
        });
        this.default_headers["Content-Security-Policy"] = csp;
    }

    // Add header defaults.
    _set_header_defaults(response) {
        response.set_headers(this.default_headers);
        // if (this.domain != null) {
        //     response.set_header("Origin", this.domain);
        //     response.set_header("Access-Control-Allow-Origin", this.domain);
        // }
    }

    // ---------------------------------------------------------
    // Endpoints (private).

    // Find endpoint.
    _find_endpoint(endpoint, method = null) {
        return this.endpoints.iterate((end) => {
            if (end.endpoint == endpoint && (method == null || method == end.method)) {
                return endpoint;
            }
        })
    }

    // Create static endpoints.
    _create_static_endpoints(base, dir) {
        const exclude = [".DS_Store"]
        let paths = [];
        dir.paths_sync().iterate((path) => {

            // Excluded.
            if (exclude.includes(path.name())) {
                return null;
            }

            // Add to paths.
            paths.push(path.str());

            // Read dir recursively.
            if (path.is_dir()) {
                paths = paths.concat(this._create_static_endpoints(base, path));
            }

            // Add file.
            else {
                let subpath = path.str().substr(base.length)
                if (subpath.charAt(0) != "/") {
                    subpath = "/" + subpath;
                }
                let data;
                if (path.extension() === ".js") {
                    data = path.load_sync();
                    const compiler = new vhighlight.JSCompiler({
                        line_breaks: true,
                        double_line_breaks: false,
                        comments: false,
                        white_space: false,
                    })
                    data = compiler.compile_code(data, path.str());
                } else {
                    data = path.load_sync({type: null});
                }
                this.endpoint(new Endpoint({
                    method: "GET",
                    endpoint: subpath,
                    data: data,
                    content_type: this._get_content_type(path.extension()),
                    compress: !Server.compressed_extensions.includes(path.extension()),
                    _path: path.str(),
                }))
            }
        })
        return paths;
    }

    // Create default endpoints.
    _create_default_endpoints() {

        // Vars.
        const additional_file_watcher_paths = [];

        // Add favicon.
        if (this.favicon != null) {
            const favicon = new vlib.Path(this.favicon);
            if (favicon.exists() === false) {
                throw Error(`Specified favicon path "${favicon}" does not exist.`);
            }
            this.endpoint(new Endpoint({
                method: "GET",
                endpoint: "/favicon.ico",
                data: favicon.load_sync({type: null}),
                content_type: this._get_content_type(favicon.extension()),
            }))
            additional_file_watcher_paths.push(favicon.str());
        }

        // Default static endpoints.
        const defaults = [
            {
                method: "GET",
                endpoint: "/vweb/vweb.css",
                content_type: "text/css",
                path: new vlib.Path(`${__dirname}/../frontend/css/vweb.css`),
            },
            {
                method: "GET",
                endpoint: "/vweb/vweb.js",
                content_type: "application/javascript",
                path: new vlib.Path(`${__dirname}/../frontend/min/vweb.js`),
                templates: {
                    GOOGLE_TAG: this.google_tag,
                }
            },
            {
                method: "GET",
                endpoint: "/vhighlight/vhighlight.css",
                content_type: "text/css",
                path: new vlib.Path(vhighlight.web_exports.css),
            },
            {
                method: "GET",
                endpoint: "/vhighlight/vhighlight.js",
                content_type: "application/javascript",
                path: new vlib.Path(vhighlight.web_exports.js),
            },
            {
                method: "GET",
                endpoint: "/vweb/payments/adyen.js",
                content_type: "application/javascript",
                path: new vlib.Path(`${__dirname}/../frontend/min/adyen.js`),
                templates: {
                    ADYEN_ENV: this.production ? "live" : "test",
                    ADYEN_CLIENT_KEY: this.payments ? this.payments.client_key : "",
                }
            },
            {
                method: "GET",
                endpoint: "/vweb/payments/adyen.css",
                content_type: "text/css",
                path: new vlib.Path(`${__dirname}/../frontend/css/adyen.css`),
            },
            {
                method: "GET",
                endpoint: "/vweb/payments/paddle.js",
                content_type: "application/javascript",
                path: new vlib.Path(`${__dirname}/../frontend/min/paddle.js`),
                templates: {
                    PADDLE_SANDBOX: this.payments ? this.payments.sandbox : true,
                    PADDLE_CLIENT_KEY: this.payments ? this.payments.client_key : "",
                    PADDLE_INCLUSIVE_TAX: this.payments ? this.payments.inclusive_tax : null,
                }
            },
        ]
        defaults.iterate((item) => {
            let data = item.path.load_sync();
            if (item.templates != null) {
                data = utils.fill_templates(data, item.templates);
            }
            this.endpoint(new Endpoint({
                method: item.method,
                endpoint: item.endpoint,
                data: data,
                content_type: item.content_type,
                compress: item.compress,
            }))
            additional_file_watcher_paths.push(item.path.str());
        })

        // Handler.
        return additional_file_watcher_paths;
    }

    // Create the sitemap endpoint.
    _create_sitemap() {
        let sitemap = "";
        sitemap += "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
        sitemap += "<urlset xmlns=\"http://www.sitemaps.org/schemas/sitemap/0.9\">\n";
        this.endpoints.iterate((endpoint) => {
            if (
                endpoint.data == null &&
                endpoint.callback == null &&
                endpoint.endpoint != "robots.txt" &&
                !endpoint.authenticated
            ) {
                sitemap += `<url>\n   <loc>${this.full_domain}/${endpoint.endpoint}</loc>\n</url>\n`;
            }
        })
        sitemap += "</urlset>\n";
        this.endpoint(new Endpoint({
            method: "GET",
            endpoint: "/sitemap.xml",
            data: sitemap,
            content_type: "application/xml",
            compress: false,
        }))
    }

    // Create the robots.txt endpoint.
    _create_robots_txt() {
        this.endpoint(new Endpoint({
            method: "GET",
            endpoint: "/robots.txt",
            content_type: "text/plain",
            data: `User-agent: *\nDisallow: \n\nSitemap: ${this.full_domain}/sitemap.xml`,
            compress: false,
        }))
    }

    // ---------------------------------------------------------
    // Server (private).

    // Initialize.
    async _initialize() {

        // Start the database.
        await this.db.initialize();

        // Database collections.
        this._sys_db = this.db.create_collection("_sys"); // the vweb sys collection.

        // Public collections.
        this.storage = this.db.create_collection("_storage"); // the sys backend storage collection for the user's server.

        // No file watcher.
        const file_watcher_restart = process.argv.includes("--file-watcher-restart");
        
        // Load keys.
        const keys_document = await this._sys_db.load("keys");
        if (keys_document == null) {
            this.hash_key = this._generate_crypto_key(32);
            await this._sys_db.save("keys", {
                sha256: this.hash_key,
            });
        } else {
            this.hash_key = keys_document.sha256;
            if (this.hash_key === undefined) {
                this.hash_key = this._generate_crypto_key(32);
                keys_document.sha256 = this.hash_key;
                await this._sys_db.save("keys", keys_document);
            }
        }

        // Initialize default headers.
        this._init_default_headers();

        // Create default endpoints.
        this._create_default_endpoints();

        // Create static endpoints.
        this.statics.iterate((path) => {
            this._create_static_endpoints(path.base(), path);
        });

        // Create sitemap when it does not exist.
        if (this._find_endpoint("sitemap.xml") == null) {
            this._create_sitemap();
        }
        
        // Create robots.txt when it does not exist.
        if (this._find_endpoint("robots.txt") == null) {
            this._create_robots_txt();
        }

        // Initialize users.
        this.users._initialize();

        // Database preview endpoints (only when production mode is disabled).
        this.db._initialize_db_preview();
        
        // Payments.
        if (this.payments !== undefined) {
            await this.payments._initialize();
        }

        // Set the caching of all endpoints.
        this.endpoints.iterate((endpoint) => {
            if (endpoint.callback === null) {
                if (this.production && endpoint.cache == null) {
                    endpoint.cache = 3600 * 24;
                } else if (!this.production) {
                    endpoint.cache = null;
                }
            }
        })

        // Get the icon and stroke icon file paths when defined.
        this.company.stroke_icon_path = null;
        this.company.icon_path = null;
        if (this.company.stroke_icon || this.company.icon) {
            this.endpoints.iterate((endpoint) => {
                if (endpoint.endpoint === this.company.stroke_icon) {
                    this.company.stroke_icon_path = endpoint._path;
                }
                if (endpoint.endpoint === this.company.icon) {
                    this.company.icon_path = endpoint._path;
                }
            });
            if (this.company.stroke_icon != null && this.company.stroke_icon_path == null) {
                throw Error(`Unable to find the company's stroke icon endpoint "${this.company.stroke_icon}".`);
            }
            if (this.company.icon != null && this.company.icon_path == null) {
                throw Error(`Unable to find the company's icon endpoint "${this.company.icon}".`);
            }
        }
    }

    // Serve a client.
    // @todo implement rate limiting.
    // @todo save internal server errors.
    async _serve(request, response) {
        return new Promise(async (resolve) => {

            // Log endpoint result.
            const log_endpoint_result = (message = null, status = null) => {
                utils.log(`${method}:${endpoint_url}: ${message === null ? response.status_message : message} [${status === null ? response.status_code : status}] (${request.ip})${libcluster.worker ? `(worker: ${libcluster.worker.id})` : ""}.`);
            }

            // Initialize the request and wait till all the data has come in.
            request = new Request(request);
            response = new Response(response);
            await request.promise;

            // Parse the request parameters.
            try {
                request._parse_params();
            } catch (err) {
                response.send({
                    status: 400, 
                    headers: {"Content-Type": "text/plain"},
                    data: `Bad Request - ${err}`,
                });
                log_endpoint_result();
                return resolve();
            }

            // Set default headers.
            this._set_header_defaults(response);

            // Check if the request matches any of the defined endpoints
            const method = request.method;
            const endpoint_url = request.endpoint;
            const endpoint = this.endpoints.find((endpoint) => {
                return endpoint.method === method && endpoint.endpoint === endpoint_url;
            });

            // No endpoint found.
            if (!endpoint) {
                response.send({
                    status: 404, 
                    headers: {"Content-Type": "text/plain"},
                    data: "Not Found",
                });
                log_endpoint_result();
                return resolve();
            }

            // Check rate limiting.
            // @todo.

            // Always perform authentication so the request.uid will also be assigned even when the endpoint is not authenticated.
            const auth_result = await this.users._authenticate(request);

            // Reset cookies when authentication has failed, so the UserID cookies etc will be reset.
            if (auth_result !== null) {
                this.users._reset_cookies(response);
            }

            // When the endpoint is authenticated and the authentication has failed then send the error response.
            if (auth_result !== null && endpoint.authenticated) {
                response.send(auth_result);
                log_endpoint_result();
                return resolve();
            }

            // Serve endpoint.
            try {
                await endpoint._serve(request, response);
            } catch (err) {
                utils.error(`${endpoint.method}:${endpoint.endpoint}: `, err);
                response.send({
                    status: 500, 
                    headers: {"Content-Type": "text/plain"},
                    data: "Internal Server Error",
                });
                log_endpoint_result();
                return resolve();
            }

            // Check if the response has been sent.
            if (!response.finished) {
                utils.error(`${endpoint.method}:${endpoint.endpoint}: `, "Unfinished response.");
                response.send({
                    status: 500, 
                    headers: {"Content-Type": "text/plain"},
                    data: "Internal Server Error",
                });
                log_endpoint_result();
                return resolve();
            }

            // Log.
            log_endpoint_result();
            return resolve();
        })
    }

    // ---------------------------------------------------------
    // Server.

    // Start the server.
	/*  @docs:
     *  @title: Start
     *  @description:
     *      Start the server.
     *  @usage:
     *      ...
     *      server.start();
     */
    async start() {

        // Inside file watcher process.
        // Just hang till file watcher has ended so the user does not have to account for the current process being the file watcher or the actual server that is starting.
        if (this.file_watcher) {
            await this.file_watcher.promise;
            return null;
        }

        // Master.
        if (this.production && libcluster.isMaster) {
            // Fork workers
            const numCPUs = libos.cpus().length;

            for (let i = 0; i < numCPUs; i++) {
                libcluster.fork();
            }

            libcluster.on('exit', (worker, code, signal) => {
                console.log(`Worker ${worker.process.pid} died`);
            });

        }

        // Forked.
        else {

            // Initialize.
            await this._initialize();

            // Set default port.
            let http_port, https_port
            if (this.port == null) {
                http_port = 80;
                https_port = 443;
            } else {
                http_port = this.port;
                https_port = this.port + 1;
            }

            // Callbacks.
            let is_running = false;
            const on_running = () => {
                if (!is_running) {
                    is_running = true;
                    if (this.https !== undefined) {
                        utils.log(`Running on http://${this.ip}:${http_port} and https://${this.ip}:${https_port}.`); // @warning if you change this running on text you should update vide::BuildSystem since that depends on this log line.
                    } else {
                        utils.log(`Running on http://${this.ip}:${http_port}.`); // @warning if you change this running on text you should update vide::BuildSystem since that depends on this log line.
                    }
                }
            }
            const on_error = (error) => {
                if (error.syscall !== 'listen') {
                    throw error; // This is a system error, not related to server listening
                }
                switch (error.code) {
                    case 'EACCES':
                        console.error(`Error: Address ${this.ip}:${this.port} requires elevated privileges.`);
                        process.exit(1);
                        break;
                    case 'EADDRINUSE':
                        console.error(`Error: Address ${this.ip}:${this.port} is already in use.`);
                        process.exit(1);
                        break;
                    default:
                        throw error;
                }
            }

            // Listen.
            this.http.listen(http_port, this.ip, on_running);
            this.http.on("error", on_error);
            if (this.https !== undefined) {
                this.https.listen(https_port, this.ip, on_running);
                this.https.on("error", on_error);
            }

            // Set signals.
            process.on('SIGTERM', () => process.exit(0)); // the "this.https.close()" handler does not always get executed when run from vide build system, so use "process.exit()" instead.
            process.on('SIGINT', () => process.exit(0));

            // Send running message.
            if (process.env.VWEB_FILE_WATCHER === "1") {
                new vlib.Path(process.env.VWEB_STARTED_FILE).save_sync("1")
            }

        }
    }

    // Stop the server and exit the program.
	/*  @docs:
     *  @title: Stop
     *  @description:
     *      Stop the server and exit the program by default.
     *  @parameter:
     *      @name: exit
     *      @description: A boolean indicating whether the program should exit after stopping the server.
     *      @type: boolean
     *  @usage:
     *      ...
     *      server.stop();
     */
    stop(exit = true) {
        if (this.https === undefined && this.http === undefined) {
            return null; // inside file watcher process.
        }
        if (this.https !== undefined) {
            this.https.close((code) => { 
				if (exit) {
                	process.exit(0);
				}
            });
        }
        this.http.close((code) => { 
			if (exit) {
            	process.exit(0);
			}
        });
    }

    // ---------------------------------------------------------
    // Content Security Policy.

    // Add a csp.
    /*  @docs:
     *  @title: Add CSP
     *  @description: Add an url to the Content-Security-Policy. This function does not overwrite the existing key's value.
     *  @warning: This function no longer has any effect when `Server.start()` has been called.
     *  @parameter:
     *      @name: key
     *      @description: The Content-Security-Policy key, e.g. `script-src`.
     *      @type: string
     *  @parameter:
     *      @name: value
     *      @description: The value to add to the Content-Security-Policy key.
     *      @type: null, string
     *  @usage:
     *      ...
     *      server.add_csp("script-src", "somewebsite.com");
     *      server.add_csp("upgrade-insecure-requests");
     */
    add_csp(key, value = null) {
        if (this.csp[key] === undefined) {
            this.csp[key] = "";
        }
        if (typeof value === "string" && value.length > 0) {
            this.csp[key] += " " + value.trim();
        }
    }

    // Remove a csp.
    /*  @docs:
     *  @title: Remove CSP
     *  @description: Remove an url from the Content-Security-Policy. This function does not overwrite the existing key's value.
     *  @warning: This function no longer has any effect when `Server.start()` has been called.
     *  @parameter:
     *      @name: key
     *      @description: The Content-Security-Policy key, e.g. `script-src`.
     *      @type: string
     *  @parameter:
     *      @name: value
     *      @description: The value to remove from the Content-Security-Policy key.
     *      @type: null, string
     *  @usage:
     *      ...
     *      server.remove_csp("script-src", "somewebsite.com");
     *      server.remove_csp("upgrade-insecure-requests");
     */
    remove_csp(key, value = null) {
        if (this.csp[option] === undefined) {
            return;
        }
        if (typeof value === "string" && value.length > 0) {
            this.csp[key] = this.csp[key].replaceAll(value, "");
        } else {
            delete this.csp[key];
        }
    }

    // Delete a csp key.
    /*  @docs:
     *  @title: Delete CSP
     *  @description: Delete an key from the Content-Security-Policy.
     *  @warning: This function no longer has any effect when `Server.start()` has been called.
     *  @parameter:
     *      @name: key
     *      @description: The Content-Security-Policy key, e.g. `script-src`.
     *      @type: string
     *  @usage:
     *      ...
     *      server.del_csp("script-src");
     *      server.del_csp("upgrade-insecure-requests");
     */
    del_csp(key) {
        delete this.csp[key];
    }

    // ---------------------------------------------------------
    // Endpoints.

    // Add one or multiple endpoints.
    /*  @docs:
        @title: Add endpoint(s)
        @description: Add one or multiple endpoints.
        @parameter:
            @name: ...endpoints
            @description:
                The endpoint parameters.

                An endpoint parameter can either be a `Endpoint` class or an `object` with the `Endpoint` arguments.
            @type: Endpoint, object
        */
    endpoint(...endpoints) {
        for (let i = 0; i < endpoints.length; i++) {
            let endpoint = endpoints[i];

            // Skip.
            if (endpoint == null) {
                continue;
            }

            // Initialize endpoint.
            if (endpoint instanceof Endpoint === false) {
                endpoint = new Endpoint(endpoint)
            }

            // Build view.
            if (endpoint.view != null) {
                if (endpoint.view.meta == null) {
                    endpoint.view.meta = this.meta.copy();
                } else if (typeof endpoint.view.meta === "object" && endpoint.view.meta instanceof Meta === false) {
                    endpoint.view.meta = new Meta(endpoint.view.meta);
                }
            }

            // Initialize the endpoint.
            endpoint._initialize(this);

            // Add endpoint.
            this.endpoints.push(endpoint);
        }
        return this;
    }

    // ---------------------------------------------------------
    // Functions.

    // Send a mail.
    /*  @docs:
     *  @title: Send Mail
     *  @description: Send one or multiple mails.
     *  @note: Make sure the domain's DNS records SPF and DKIM are properly configured when sending attachments.
     *  @return:
     *      Returns a promise that will be resolved or rejected when the mail has been sent.
     *  @parameter:
     *      @name: sender
     *      @description:
     *          The sender address.
     *          A sender address may either be a string with the email address, e.g. `your@email.com`.
     *          Or an array with the sender name and email address, e.g. `["Sender", "your@email.com"]`.
     *      @type: string, array
     *  @parameter:
     *      @name: recipients
     *      @description:
     *          The recipient addresses.
     *          A reciepient address may either be a string with the email address, e.g. `your@email.com`.
     *          Or an array with the sender name and email address, e.g. `["Sender", "your@email.com"]`.
     *      @type: array[string, array]
     *  @parameter:
     *      @name: subject
     *      @description: The subject text.
     *      @type: string
     *  @parameter:
     *      @name: body
     *      @description: The body text.
     *      @type: string
     *  @parameter:
     *      @name: attachments
     *      @description: An array with absolute file paths for attachments, or an array with nodemailer attachment objects.
     *      @type: array[string], array[object]
     *  @usage:
     *      ...
     *      await server.send_mail({
     *          sender: ["Sender Name", "sender\@email.com"],
     *          recipients: [
     *              ["Recipient Name", "recipient1\@email.com"],
     *              "recipient2\@email.com",
     *          },
     *          subject: "Example Mail",
     *          body: "Hello World!",
     *          attachments: ["/path/to/image.png"]
     *      });
     */
    async send_mail({
        sender = null,
        recipients = [],
        subject = null,
        body = "",
        attachments = [],
    }) {
        // return new Promise(async (resolve, reject) => {

        // Not enabled.
        if (this.smtp === undefined) {
            return new Error("SMTP is not enabled, define the required server argument on initialization to enable smtp.");
        }

        // Convert MailElement to html.
        if (body instanceof Mail.MailElement) {
            body = body.html();
        }

        // Check args.
        if (sender == null) {
            sender = this.smtp_sender;
        }
        if (recipients.length === 0) {
            return new Error(`The mail has no recipients.`);
        }
        if (sender == null) {
            return new Error(`Parameter "sender" should be a defined value of type "string" or "array".`);
        }

        // Format address wrapper.
        const format_address = (address) => {
            if (Array.isArray(address)) {
                return `${address[0]} <${address[1]}>`;
            }
            return address;
        }

        // Create to array.
        const to = [];
        recipients.iterate((address) => to.push(format_address(address)));

        // Create attachments array.
        let attached_files = [];
        if (attachments != null) {
            if (attachments.length > 0 && typeof attachments[0] === "object") {
                attached_files = attachments;
            } else {
                attachments.iterate((path) => {
                    if (path instanceof vlib.Path) {
                        attached_files.push({
                            filename: path.name(),
                            path: path.str(),
                        })
                    } else {
                        attached_files.push({
                            filename: new vlib.Path(path).name(),
                            path: path,
                        })
                    }
                })
            }
        }

        // Send mail.
        try {
            return await this.smtp.sendMail({
                from: format_address(sender),
                to: to,
                subject: subject,
                html: body,
                attachments: attachments,
            });
        } catch (error) {
            throw new Error(error.message); // to keep readable stacktrace.
        }
    }

    // ---------------------------------------------------------
    // Default callbacks.
    // These can all be overwritten by the user.

    // On successfull one-time payment.
    // This gets called for every product in the payment.
    on_payment({product, payment}) {}

    // On successfull subscription.
    // This gets called for every product in the payment.
    on_subscription({product, payment}) {}

    // On failed one-time or recurring payment.
    on_failed_payment({payment}) {}

    // On successfull cancellation.
    on_cancellation({payment, line_items}) {}

    // On failed cancellation.
    on_failed_cancellation({payment, line_items}) {}

    // On successfull refund.
    // The line items array are the items were refunded.
    on_refund({payment, line_items}) {}

    // On failed refund.
    // The line items array are the items were the refund failed.
    on_failed_refund({payment, line_items}) {}

    // On chargeback.
    // The line items array are the items were charged back.
    on_chargeback({payment, line_items}) {}

    // On failed chargeback.
    // The line items array are the items were the chargeback failed.
    on_failed_chargeback({payment, line_items}) {}

    // Mail template.
    _mail_template({
        max_width = 400,
        children = [],
    }) {
        const style = this.mail_style;
        const {Title, Text, Image, Table, TableRow, TableData, VStack} = Mail;

        // Create header.
        let header;
        if (this.company.stroke_icon != null) {
            header = [
                Image(`${this.full_domain}/${this.company.stroke_icon}`)
                    .height(16),
            ]
        } else if (this.company.icon != null) {
            header = [
                Image(`${this.full_domain}/${this.company.icon}`)
                    .frame(20, 40),
            ]
        }
        if (header) {
            header = Table(
                TableRow(...header)
                .wrap(true)
                .center()
                .center_vertical()
            )
            .margin_bottom(15);
        }

        // Create mail.
        return Mail.Mail(
            Table(
                TableData(
                    Table(
                    
                        // Header.
                        header,

                        // Widget.
                        Table(...children)
                        .background_color(style.widget_bg)
                        .border(`1px solid ${style.widget_border}`)
                        .border_radius("10px")
                        .padding(40, 25, 25, 25)
                        .margin(0),

                        // Copyright.
                        Table(
                            TableRow(
                                Text(
                                    `Copyright Â© ${new Date().getFullYear()} ${this.company.name}, ${this.company.legal_name} All Rights Included.\n` +
                                    `${this.company.street} ${this.company.house_number}, ${this.company.postal_code}, ${this.company.city}, ${this.company.province}, ${this.company.country}.\n` +
                                    (this.company.tax_id == null ? "" : `VAT ID ${this.company.tax_id}`)
                                )
                                .white_space("pre")
                                .display("inline-block")
                                .font_size(11)
                                .color(style.footer_fg)
                                .margin(0)
                            )
                            .center()
                            .center_vertical(),
                        )
                        .margin(0, 0, 10, 0)
                    )
                    .max_width(max_width)
                )
                .center()
            )
            .padding(25, 20, 25, 20)
        )
        .font_family(style.font)
        .background(style.bg)
    }

    // Render payment line items.
    _render_mail_payment_line_items({payment, line_items, show_total_due = false}) {

        // Shortcuts.
        const style = this.mail_style;
        const {Title, Text, Image, Table, TableRow, TableData, VStack} = Mail;

        // Render payment line item for a mail.
        const _render_mail_payment_line_item = ({name, desc, unit_cost, quantity, total_cost, font_weight = "normal", divider = true, color = style.text_fg}) => {
            return [
                Table(
                    TableRow(
                        TableData(
                            Text(name)
                                .color(color)
                                .font_size(14)
                                .text_wrap("wrap")
                                .overflow_wrap("break-word")
                                .word_wrap("break-word")
                                .font_weight(font_weight)
                        )
                        .width("25%")
                        .margin_right(10),
                        TableData(
                            Text(desc)
                                .color(color)
                                .font_size(14)
                                .text_wrap("wrap")
                                .overflow_wrap("break-word")
                                .word_wrap("break-word")
                                .font_weight(font_weight)
                        )
                        .width("35%")
                        .margin_right(10),
                        TableData(
                            Text(unit_cost)
                                .color(color)
                                .font_size(14)
                                .text_wrap("wrap")
                                .overflow_wrap("break-word")
                                .word_wrap("break-word")
                                .font_weight(font_weight)
                        )
                        .fixed_width("13.32%")
                        .margin_right(10),
                        TableData(
                            Text(quantity)
                                .color(color)
                                .font_size(14)
                                .text_wrap("wrap")
                                .overflow_wrap("break-word")
                                .word_wrap("break-word")
                                .font_weight(font_weight)
                        )
                        .fixed_width("13.32%")
                        .margin_right(10),
                        TableData(
                            Text(total_cost)
                                .color(color)
                                .font_size(14)
                                .text_wrap("wrap")
                                .overflow_wrap("break-word")
                                .word_wrap("break-word")
                                .font_weight(font_weight)
                        )
                        .fixed_width("13.32%"),
                    )
                    .width("100%")
                    .styles({"vertical-align": "baseline"}),
                )
                .width("100%"),

                !divider ? null : TableRow(
                    TableData(
                        VStack()
                            .background_color(style.text_fg)
                            .frame("100%", 1)
                            .margin(5, 0, 10, 0)
                    )
                    .frame("100%", 1)
                )
                .width("100%"),
            ];
        }

        // Render a dividier.
        const render_divider = () => {
            return TableRow(
                TableData(
                    VStack()
                        .background_color(style.divider_bg)
                        .frame("100%", 1)
                        .margin(5, 0, 10, 0)
                )
                .frame("100%", 1)
            )
            .width("100%")
        }

        // Vars.
        let currency = null;
        let subtotal = 0;
        let subtotal_tax = 0;
        let total = 0;
        payment.line_items.iterate((item) => {
            if (typeof item.product === "string") {
                item.product = this.payments.get_product_sync(item.product);
            }
            if (currency == null) {
                currency = utils.get_currency_symbol(item.product.currency);
            }
            subtotal += item.subtotal;
            subtotal_tax += item.tax;
            total += item.total;
        })
        let total_due = payment.status === "open" ? total : 0;

        return [
            render_divider(),
            line_items.iterate_append((item, index) => {
                return Table(
                    TableRow(
                        TableData(
                            Image(item.product.icon)
                            .frame(35, 35)
                            .margin_right(15),
                        )
                        .width("auto"),
                        TableData(
                            Table(
                                Text(item.product.name)
                                    .color(style.title_fg)
                                    .font_size(14)
                                    .font_weight("bold")
                                    .margin(0)
                                    .ellipsis_overflow(true),
                                Text(item.product.description)
                                    .color(style.text_fg)
                                    .font_size(14)
                                    .margin(0)
                                    .ellipsis_overflow(true)
                            )
                        )
                        .width("100%"),
                        TableData(
                            Text(`${currency} ${item.subtotal.toFixed(2)}`)
                                .color(style.title_fg)
                                .font_size(14)
                                .font_weight("bold")
                                .margin(0)
                                .white_space("nowrap")
                        )
                        .width("100%")
                    )
                    .wrap(true)
                    .leading_vertical()
                    .width("100%")
                )
                .width("100%")
            }),
            render_divider(),
            Table(
                [
                    ["Subtotal:", `${currency} ${subtotal.toFixed(2)}`],
                    ["Tax:", `${currency} ${subtotal_tax.toFixed(2)}`],
                    ["Total:", `${currency} ${total.toFixed(2)}`],
                ].iterate_append((item) => {
                    return TableRow(
                        TableData()
                            .width("100%"),
                        TableData(
                            Text(item[0])
                            .color(style.title_fg)
                            .font_size(14)
                            .ellipsis_overflow(true)
                            .font_weight("bold")
                        )
                        .min_width(75),
                        TableData(
                            Text(item[1])
                            .color(style.title_fg)
                            .font_size(14)
                            .white_space("nowrap")
                            .font_weight("bold"),
                        )
                        // .min_width(50)
                    )
                    .wrap(true)
                    // .text_align("right")
                }),
            ),

            // Line items.
            // _render_mail_payment_line_item({
            //     name: "Item",
            //     desc: "Description",
            //     unit_cost: "Unit Cost",
            //     quantity: "Quantity",
            //     total_cost: "Line Total",
            //     font_weight: "bold",
            //     color: style.title_fg,
            // }),
            // line_items.iterate_append((item, index) => _render_mail_payment_line_item({
            //     name: item.product.name,
            //     desc: item.product.description,
            //     unit_cost: `${currency} ${(item.total / item.total.quantity).toFixed(2)}`,
            //     quantity: item.quantity.toString(),
            //     total_cost: `${currency} ${item.total.toFixed(2)}`,
            // })),
            // _render_mail_payment_line_item({
            //     unit_cost: "Subtotal",
            //     total_cost: `${currency} ${subtotal.toFixed(2)}`,
            //     font_weight: "bold",
            //     divider: false,
            //     color: style.title_fg,
            // }),
            // _render_mail_payment_line_item({
            //     unit_cost: "Taxes",
            //     total_cost: `${currency} ${subtotal_tax.toFixed(2)}`,
            //     font_weight: "bold",
            //     divider: false,
            //     color: style.title_fg,
            // }),
            // _render_mail_payment_line_item({
            //     unit_cost: "Total",
            //     total_cost: `${currency} ${total.toFixed(2)}`,
            //     font_weight: "bold",
            //     divider: false,
            //     color: style.title_fg,
            // }),
            // show_total_due === false ? null : _render_mail_payment_line_item({
            //     unit_cost: "Total Due",
            //     total_cost: `${currency} ${total_due.toFixed(2)}`,
            //     font_weight: "bold",
            //     divider: false,
            //     color: style.title_fg,
            // }),
        ]
    }

    // On 2fa mail.
    on_2fa_mail({code, username, email, date, ip, device}) {
        const style = this.mail_style;
        const {Title, Text, Image, Table, TableRow, TableData, VStack} = Mail;
        return this._mail_template({
            max_width: 400,
            children: [

                // Title.
                TableRow(
                    Title("Verification Required")
                        .color(style.title_fg)
                        .width("fit-content")
                        .font_size(26)
                )
                .center(),

                // Text.
                TableRow(
                    Text("Please confirm your request with this 2FA code.")
                        .center()
                        .margin(10, 0, 20, 0)
                        .color(style.text_fg)
                        .font_size(18)
                ),

                // Auth info.
                [
                    ["Username", username],
                    ["Email", email],
                    ["Date", date],
                    ["Ip Address", ip],
                    ["Device", device],
                ].iterate_append((item) => {
                    return [

                        TableRow(
                            VStack()
                                .margin_right(7.5)
                                // .background("linear-gradient(135deg, #4830C4, #6E399E, #421959)")
                                .background_color(style.text_fg)
                                .border_radius("50%")
                                .frame(5, 5),
                            Text(`<span style='font-weight: 600'>${item[0]}:</span> ${item[1]}`)
                                .color(style.text_fg)
                                .font_size(16)
                                .text_wrap("wrap")
                                .overflow_wrap("break-word")
                                .word_wrap("break-word"),
                        )
                        .wrap(true)
                        .center_vertical(),

                        TableRow().fixed_frame(5, 5),
                    ]
                }),
                
                // 2FA code.
                TableRow(
                    Text(code)
                        .background(style.button_bg)
                        .border_radius("10px")
                        .padding(10, 15)
                        .center()
                        .color(style.button_fg)
                        .width("100%")
                        .margin(20, 0, 0, 0)
                ),

                // Text.
                TableRow(
                    Text("This 2FA code will be valid for 5 minutes.")
                        .color(style.text_fg)
                        .font_style("italic")
                        .font_size(12)
                        .margin_top(20)
                        .center(),
                ),
            ],
        });
    }

    // On successfull payment mail.
    on_payment_mail({payment}) {

        // Shortcuts.
        const style = this.mail_style;
        const {Title, Text, Image, Table, TableRow, TableData, VStack} = Mail;

        // Create mail.
        return this._mail_template({
            max_width: 600,
            children: [

                // Title.
                TableRow(
                    Title("Successful Payment")
                        .color(style.title_fg)
                        .width("fit-content")
                        .font_size(26)
                )
                .center(),

                // Text.
                TableRow(
                    Text("We're delighted to inform you that your payment has been successfully processed. Thank you for your purchase.")
                        .margin(10, 0, 20, 0)
                        .color(style.text_fg)
                        .font_size(16)
                        .center()
                ),

                // Image.
                TableRow(
                    Image(`${this.full_domain}/static/payments/party.png`)
                        .frame(60, 60)
                        .margin(0, 0, 30, 0)
                )
                .center(),

                // Title.
                TableRow(
                    Title("Order Summary")
                        .color(style.subtitle_fg)
                        .font_size(18)
                        .margin(0)
                ),
                TableRow(
                    Text("A summary of your order can be found below or in the attachmed invoice pdf.")
                        .margin(5, 0, 20, 0)
                        .color(style.text_fg)
                        .font_size(16)
                ),

                // Line items.
                this._render_mail_payment_line_items({payment, line_items: payment.line_items, total_due: true}),
                

                // Bottom spacing.
                VStack()
                    .margin_bottom(15)
            ],
        });
    }

    // On failed payment mail.
    on_failed_payment_mail({payment}) {

        // Shortcuts.
        const style = this.mail_style;
        const {Title, Text, Image, Table, TableRow, TableData, VStack} = Mail;

        // Create mail.
        return this._mail_template({
            max_width: 800,
            children: [

                // Title.
                TableRow(
                    Title("Payment Failed")
                        .color(style.title_fg)
                        .width("fit-content")
                        .font_size(26)
                )
                .center(),

                // Text.
                TableRow(
                    Text("We regret to inform you that your payment has encountered an issue and could not be processed successfully. We understand the inconvenience this may cause. Please try again, please contact customer support if the problem persists.")
                        .margin(10, 0, 20, 0)
                        .color(style.text_fg)
                        .font_size(16)
                        .center()
                ),

                // Image.
                TableRow(
                    ImageMask(`${this.full_domain}/static/payments/error.png`)
                        .frame(40, 40)
                        .mask_color("#E8454E")
                        .margin(0, 0, 30, 0)
                )
                .center(),

                // Title.
                TableRow(
                    Title("Order Summary")
                        .color(style.subtitle_fg)
                        .font_size(18)
                        .margin(0)
                ),
                TableRow(
                    Text("A summary of your failed order can be found below.")
                        .margin(5, 0, 20, 0)
                        .color(style.text_fg)
                        .font_size(16)
                ),

                // Line items.
                this._render_mail_payment_line_items({payment, line_items: payment.line_items}),

                // Bottom spacing.
                VStack()
                    .margin_bottom(15)
            ],
        });
    }

    // On cancellation mail.
    on_cancellation_mail({payment, line_items}) {

        // Shortcuts.
        const style = this.mail_style;
        const {Title, Text, Image, Table, TableRow, TableData, VStack} = Mail;

        // Create mail.
        return this._mail_template({
            max_width: 800,
            children: [

                // Title.
                TableRow(
                    Title("Successfull Cancellation")
                        .color(style.title_fg)
                        .width("fit-content")
                        .font_size(26)
                )
                .center(),

                // Text.
                TableRow(
                    Text("Your recent cancellation request has been successfully processed.")
                        .margin(10, 0, 20, 0)
                        .color(style.text_fg)
                        .font_size(16)
                        .center()
                ),

                // Image.
                TableRow(
                    Image(`${this.full_domain}/static/payments/check.png`)
                        .frame(40, 40)
                        .margin(0, 0, 30, 0)
                )
                .center(),

                // Title.
                TableRow(
                    Title("Cancelled Summary")
                        .color(style.subtitle_fg)
                        .font_size(18)
                        .margin(0)
                ),
                TableRow(
                    Text("A summary of your cancelled products.")
                        .margin(5, 0, 20, 0)
                        .color(style.text_fg)
                        .font_size(16)
                ),

                // Line items.
                this._render_mail_payment_line_items({payment, line_items}),

                // Bottom spacing.
                VStack()
                    .margin_bottom(15)
            ],
        });
    }

    // On refund mail.
    on_failed_cancellation_mail({payment}) {

        // Shortcuts.
        const style = this.mail_style;
        const {Title, Text, Image, ImageMask, Table, TableRow, TableData, VStack} = Mail;

        // Create mail.
        return this._mail_template({
            max_width: 800,
            children: [

                // Title.
                TableRow(
                    Title("Cancellation Failed")
                        .color(style.title_fg)
                        .width("fit-content")
                        .font_size(26)
                )
                .center(),

                // Text.
                TableRow(
                    Text("We regret to inform you that your recent cancellation request has encountered an issue and could not be processed successfully. We understand the inconvenience this may cause. If you believe you are eligible for a cancellation, please try again or contact customer support.")
                        .margin(10, 0, 20, 0)
                        .color(style.text_fg)
                        .font_size(16)
                        .center()
                )
                .center(),

                // Image.
                TableRow(
                    ImageMask(`${this.full_domain}/static/payments/error.png`)
                        .frame(40, 40)
                        .mask_color("#E8454E")
                        .margin(0, 0, 30, 0)
                )
                .center(),

                // Title.
                TableRow(
                    Title("Cancellation Summary")
                        .color(style.subtitle_fg)
                        .font_size(18)
                        .margin(0)
                ),
                TableRow(
                    Text("A summary of your cancellation request.")
                        .margin(5, 0, 20, 0)
                        .color(style.text_fg)
                        .font_size(16)
                ),

                // Line items.
                this._render_mail_payment_line_items({payment, line_items: payment.line_items}),

                // Bottom spacing.
                VStack()
                    .margin_bottom(15)
            ],
        });
    }

    // On refund mail.
    on_refund_mail({payment, line_items}) {

        // Shortcuts.
        const style = this.mail_style;
        const {Title, Text, Image, Table, TableRow, TableData, VStack} = Mail;

        // Create mail.
        return this._mail_template({
            max_width: 800,
            children: [

                // Title.
                TableRow(
                    Title("Successful Refund")
                        .color(style.title_fg)
                        .width("fit-content")
                        .font_size(26)
                )
                .center(),

                // Text.
                TableRow(
                    Text("We're delighted to inform you that your recent refund request has been successfully processed. The charged amount will soon be credited back to your account.")
                        .margin(10, 0, 20, 0)
                        .color(style.text_fg)
                        .font_size(16)
                        .center()
                ),

                // Image.
                TableRow(
                    Image(`${this.full_domain}/static/payments/party.png`)
                        .frame(60, 60)
                        .margin(0, 0, 30, 0)
                )
                .center(),

                // Title.
                TableRow(
                    Title("Refund Summary")
                        .color(style.subtitle_fg)
                        .font_size(18)
                        .margin(0)
                ),
                TableRow(
                    Text("A summary of your refunded products.")
                        .margin(5, 0, 20, 0)
                        .color(style.text_fg)
                        .font_size(16)
                ),

                // Line items.
                this._render_mail_payment_line_items({payment, line_items}),

                // Bottom spacing.
                VStack()
                    .margin_bottom(15)
            ],
        });
    }

    // On refund mail.
    on_failed_refund_mail({payment, line_items}) {

        // Shortcuts.
        const style = this.mail_style;
        const {Title, Text, Image, ImageMask, Table, TableRow, TableData, VStack} = Mail;

        // Create mail.
        return this._mail_template({
            max_width: 800,
            children: [

                // Title.
                TableRow(
                    Title("Refund Failed")
                        .color(style.title_fg)
                        .width("fit-content")
                        .font_size(26)
                )
                .center(),

                // Text.
                TableRow(
                    Text("We regret to inform you that your recent refund request has encountered an issue and could not be processed successfully. We understand the inconvenience this may cause. If you believe you are eligible for a refund, please try again or contact customer support.")
                        .margin(10, 0, 20, 0)
                        .color(style.text_fg)
                        .font_size(16)
                        .center()
                )
                .center(),

                // Image.
                TableRow(
                    ImageMask(`${this.full_domain}/static/payments/error.png`)
                        .frame(40, 40)
                        .mask_color("#E8454E")
                        .margin(0, 0, 30, 0)
                )
                .center(),

                // Title.
                TableRow(
                    Title("Refund Summary")
                        .color(style.subtitle_fg)
                        .font_size(18)
                        .margin(0)
                ),
                TableRow(
                    Text("A summary of your refund request.")
                        .margin(5, 0, 20, 0)
                        .color(style.text_fg)
                        .font_size(16)
                ),

                // Line items.
                this._render_mail_payment_line_items({payment, line_items}),

                // Bottom spacing.
                VStack()
                    .margin_bottom(15)
            ],
        });
    }

    // On refund mail.
    on_chargeback_mail({payment, line_items}) {

        // Shortcuts.
        const style = this.mail_style;
        const {Title, Text, Image, Table, TableRow, TableData, VStack} = Mail;

        // Create mail.
        return this._mail_template({
            max_width: 800,
            children: [

                // Title.
                TableRow(
                    Title("Successful Refund")
                        .color(style.title_fg)
                        .width("fit-content")
                        .font_size(26)
                )
                .center(),

                // Text.
                TableRow(
                    Text("We're delighted to inform you that your recent chargeback request has been successfully processed. The charged amount will soon be credited back to your account.")
                        .margin(10, 0, 20, 0)
                        .color(style.text_fg)
                        .font_size(16)
                        .center()
                ),

                // Image.
                TableRow(
                    Image(`${this.full_domain}/static/payments/party.png`)
                        .frame(60, 60)
                        .margin(0, 0, 30, 0)
                )
                .center(),

                // Title.
                TableRow(
                    Title("Chargeback Summary")
                        .color(style.subtitle_fg)
                        .font_size(18)
                        .margin(0)
                ),
                TableRow(
                    Text("A summary of your refundend products.")
                        .margin(5, 0, 20, 0)
                        .color(style.text_fg)
                        .font_size(16)
                ),

                // Line items.
                this._render_mail_payment_line_items({payment, line_items}),

                // Bottom spacing.
                VStack()
                    .margin_bottom(15)
            ],
        });
    }

    // On refund mail.
    on_failed_chargeback_mail({payment, line_items}) {

        // Shortcuts.
        const style = this.mail_style;
        const {Title, Text, Image, ImageMask, Table, TableRow, TableData, VStack} = Mail;

        // Create mail.
        return this._mail_template({
            max_width: 800,
            children: [

                // Title.
                TableRow(
                    Title("Chargeback Failed")
                        .color(style.title_fg)
                        .width("fit-content")
                        .font_size(26)
                )
                .center(),

                // Text.
                TableRow(
                    Text("We regret to inform you that your recent chargeback request has been declined.")
                        .margin(10, 0, 20, 0)
                        .color(style.text_fg)
                        .font_size(16)
                        .center()
                )
                .center(),

                // Image.
                TableRow(
                    ImageMask(`${this.full_domain}/static/payments/error.png`)
                        .frame(40, 40)
                        .mask_color("#E8454E")
                        .margin(0, 0, 30, 0)
                )
                .center(),

                // Title.
                TableRow(
                    Title("Chargeback Summary")
                        .color(style.subtitle_fg)
                        .font_size(18)
                        .margin(0)
                ),
                TableRow(
                    Text("A summary of your chargeback request.")
                        .margin(5, 0, 20, 0)
                        .color(style.text_fg)
                        .font_size(16)
                ),

                // Line items.
                this._render_mail_payment_line_items({payment, line_items}),

                // Bottom spacing.
                VStack()
                    .margin_bottom(15)
            ],
        });
    }
}

// ---------------------------------------------------------
// Exports.

module.exports = Server;
