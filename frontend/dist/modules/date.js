const vweb = {};
/* DO NOT EDIT THIS FILE IT IS LOCATED AT /Users/administrator/persistance//private/dev/vinc/vlib/js/include/types/global/date.js. */
vweb.Date = class D extends Date {
    constructor(...args) {
        super(...args);
    }
    format(format) {
        let formatted = "";
        for (let i = 0; i < format.length; i++) {
            if (format[i] === "%") {
                switch (format[i + 1]) {
                    case '%':
                        formatted += "%";
                        ++i;
                        break;
                    case 'a':
                        formatted += new Intl.DateTimeFormat('en-US', { weekday: 'short' }).format(this);
                        ++i;
                        break;
                    case 'A':
                        formatted += new Intl.DateTimeFormat('en-US', { weekday: 'long' }).format(this);
                        ++i;
                        break;
                    case 'b':
                    case 'h':
                        formatted += new Intl.DateTimeFormat('en-US', { month: 'short' }).format(this);
                        ++i;
                        break;
                    case 'B':
                        formatted += new Intl.DateTimeFormat('en-US', { month: 'long' }).format(this);
                        ++i;
                        break;
                    case 'C':
                        formatted += Math.floor(this.getFullYear() / 100);
                        ++i;
                        break;
                    case 'd':
                        formatted += String(this.getDate()).padStart(2, '0');
                        ++i;
                        break;
                    case 'e':
                        formatted += String(this.getDate());
                        ++i;
                        break;
                    case 'D':
                        formatted += this.format("%m/%d/%y");
                        ++i;
                        break;
                    case 'F':
                        formatted += this.format("%Y-%m-%d");
                        ++i;
                        break;
                    case 'H':
                        formatted += String(this.getHours()).padStart(2, '0');
                        ++i;
                        break;
                    case 'I':
                        formatted += String((this.getHours() % 12) || 12).padStart(2, '0');
                        ++i;
                        break;
                    case 'j':
                        formatted += String(Math.floor((this - new Date(this.getFullYear(), 0, 0)) / (86400 * 1000))).padStart(3, '0');
                        ++i;
                        break;
                    case 'k':
                        formatted += String(this.getHours());
                        ++i;
                        break;
                    case 'l':
                        formatted += String((this.getHours() % 12) || 12);
                        ++i;
                        break;
                    case 'm':
                        formatted += String(this.getMonth() + 1).padStart(2, '0');
                        ++i;
                        break;
                    case 'M':
                        formatted += String(this.getMinutes()).padStart(2, '0');
                        ++i;
                        break;
                    case 'n':
                        formatted += "\n";
                        ++i;
                        break;
                    case 'N':
                        formatted += String(this.getMilliseconds()).padStart(Number(format[i + 2]) || 3, '0');
                        i += 2;
                        break;
                    case 'p':
                        formatted += new Intl.DateTimeFormat('en-US', { hour: 'numeric', hour12: true }).format(this);
                        ++i;
                        break;
                    case 'P':
                        formatted += new Intl.DateTimeFormat('en-US', { hour: 'numeric', hour12: true }).format(this).toLowerCase();
                        ++i;
                        break;
                    case 'r':
                        formatted += this.format("%I:%M:%S %p");
                        ++i;
                        break;
                    case 'R':
                        formatted += this.format("%H:%M");
                        ++i;
                        break;
                    case 's':
                        formatted += Math.floor(this.getTime() / 1000);
                        ++i;
                        break;
                    case 'S':
                        formatted += String(this.getSeconds()).padStart(2, '0');
                        ++i;
                        break;
                    case 't':
                        formatted += "\t";
                        ++i;
                        break;
                    case 'T':
                        formatted += this.format("%H:%M:%S");
                        ++i;
                        break;
                    case 'u':
                        formatted += this.getDay() || 7;
                        ++i;
                        break;
                    case 'U':
                        formatted += String(Math.ceil((this - new Date(this.getFullYear(), 0, 1)) / (86400 * 1000) + 1) / 7).padStart(2, '0');
                        ++i;
                        break;
                    case 'V':
                        const jan4 = new Date(this.getFullYear(), 0, 4);
                        const startOfWeek = new Date(this.getFullYear(), 0, 1);
                        const daysSinceJan4 = Math.floor((this - jan4) / (86400 * 1000));
                        const weekNumber = Math.ceil((daysSinceJan4 + jan4.getDay() + 1) / 7);
                        formatted += String(weekNumber).padStart(2, '0');
                        ++i;
                        break;
                    case 'w':
                        formatted += this.getDay();
                        ++i;
                        break;
                    case 'W':
                        formatted += String(Math.floor((this - new Date(this.getFullYear(), 0, 1)) / (86400 * 1000) + 1) / 7).padStart(2, '0');
                        ++i;
                        break;
                    case 'x':
                        formatted += new Intl.DateTimeFormat('en-US').format(this);
                        ++i;
                        break;
                    case 'X':
                        formatted += new Intl.DateTimeFormat('en-US', { hour: 'numeric', minute: 'numeric', second: 'numeric' }).format(this);
                        ++i;
                        break;
                    case 'y':
                        formatted += String(this.getFullYear()).slice(-2);
                        ++i;
                        break;
                    case 'Y':
                        formatted += String(this.getFullYear());
                        ++i;
                        break;
                    case ':':
                    case 'z':
                        const timezoneOffset = this.getTimezoneOffset();
                        const sign = timezoneOffset > 0 ? '-' : '+';
                        const hours = String(Math.floor(Math.abs(timezoneOffset) / 60)).padStart(2, '0');
                        const minutes = String(Math.abs(timezoneOffset) % 60).padStart(2, '0');
                        if (format[i + 1] === "z") {
                            formatted += `${sign}${hours}${minutes}`;
                            i += 1;
                        }
                        else if (format[i + 2] === "z") {
                            formatted += `${sign}${hours}:${minutes}`;
                            i += 2;
                        }
                        else if (format[i + 3] === "z") {
                            formatted += `${sign}${hours}:${minutes}:${this.format('XN')}`;
                            i += 3;
                        }
                        else if (format[i + 4] === "z") {
                            formatted += `${sign}${hours}:${minutes}:${this.format('XN').slice(0, 2)}`;
                            i += 4;
                        }
                        break;
                    case 'Z':
                        formatted += Intl.DateTimeFormat('en-US', { timeZoneName: 'short' }).format(this);
                        ++i;
                        break;
                    default:
                        formatted += format[i];
                        break;
                }
            }
            else {
                formatted += format[i];
            }
        }
        return formatted;
    }
    msec() { return this.getTime(); }
    sec() { return parseInt(this.getTime() / 1000); }
    minute_start() {
        const date = new D(this.getTime());
        date.setSeconds(0);
        date.setMilliseconds(0);
        return date;
    }
    hour_start() {
        const date = new D(this.getTime());
        date.setMinutes(0, 0, 0);
        return date;
    }
    day_start() {
        const date = new D(this.getTime());
        date.setHours(0, 0, 0, 0);
        return date;
    }
    week_start(sunday_start = true) {
        const diff = (this.getDay() + 7 - (sunday_start ? 0 : 1)) % 7;
        const date = new D(this.getTime());
        date.setDate(this.getDate() - diff);
        date.setHours(0, 0, 0, 0);
        ;
        return date;
    }
    month_start() {
        const date = new D(this.getTime());
        date.setDate(1);
        date.setHours(0, 0, 0, 0, 0);
        return date;
    }
    quarter_year_start() {
        const date = new D(this.getTime());
        const month = date.getMonth() + 1;
        if (month > 9) {
            date.setMonth(9 - 1, 1);
            date.setHours(0, 0, 0, 0, 0);
        }
        else if (month > 6) {
            date.setMonth(6 - 1, 1);
            date.setHours(0, 0, 0, 0, 0);
        }
        else if (month > 3) {
            date.setMonth(3 - 1, 1);
            date.setHours(0, 0, 0, 0, 0);
        }
        else {
            date.setMonth(0, 1);
            date.setHours(0, 0, 0, 0, 0);
        }
        return date;
    }
    half_year_start() {
        const date = new D(this.getTime());
        if (date.getMonth() + 1 > 6) {
            date.setMonth(5, 1);
            date.setHours(0, 0, 0, 0, 0);
        }
        else {
            date.setMonth(0, 1);
            date.setHours(0, 0, 0, 0, 0);
        }
        return date;
    }
    year_start() {
        const date = new D(this.getTime());
        date.setMonth(0, 1);
        date.setHours(0, 0, 0, 0, 0);
        return date;
    }
    increment({ seconds = 0, minutes = 0, hours = 0, days = 0, weeks = 0, months = 0, years = 0 }) {
        const date = new D(this.getTime());
        if (seconds > 0)
            date.setSeconds(date.getSeconds() + seconds);
        if (minutes > 0)
            date.setMinutes(date.getMinutes() + minutes);
        if (hours > 0)
            date.setHours(date.getHours() + hours);
        if (days > 0 || weeks > 0)
            date.setDate(date.getDate() + days + weeks * 7);
        if (months > 0)
            date.setMonth(date.getMonth() + months);
        if (years > 0)
            date.setFullYear(date.getFullYear() + years);
        return date;
    }
    decrement({ seconds = 0, minutes = 0, hours = 0, days = 0, weeks = 0, months = 0, years = 0 }) {
        const date = new D(this.getTime());
        if (seconds > 0)
            date.setSeconds(date.getSeconds() - seconds);
        if (minutes > 0)
            date.setMinutes(date.getMinutes() - minutes);
        if (hours > 0)
            date.setHours(date.getHours() - hours);
        if (days > 0 || weeks > 0)
            date.setDate(date.getDate() - (days + weeks * 7));
        if (months > 0)
            date.setMonth(date.getMonth() - months);
        if (years > 0)
            date.setFullYear(date.getFullYear() - years);
        return date;
    }
};
const Date = vweb.Date;
export { Date };
